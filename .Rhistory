offspring.genotype <- off.genotype.matrix[, which(colnames(off.genotype.matrix) %in% mrk_list)]
sire.genotype <- sire.genotype.matrix[, which(colnames(sire.genotype.matrix) %in% mrk_list)]
dam.genotype <- dam.genotype.matrix[, which(colnames(dam.genotype.matrix) %in% mrk_list)]
# ASSIGNATION
library(APIS)
result <- APIS(off.genotype = offspring.genotype,
dam.genotype = dam.genotype,
sire.genotype = sire.genotype[sample(c(1:39), 20),],
error = 0.05)
rm (list = ls())
setwd("C:/Users/rgriot/Desktop/Publication/APIS/package/exemple")
offspring.genotype <- as.matrix(read.table('offspring_genotype.txt'))
rm (list = ls())
setwd("C:/Users/rgriot/Desktop/Publication/APIS/package/exemple")
offspring.genotype  <- as.matrix(read.table('offspring_genotype.txt'))
sire.genotype       <- as.matrix(read.table('sire_genotype.txt'))
dam.genotype       <- as.matrix(read.table('dam_genotype.txt'))
library("APIS", lib.loc="C:/Program Files/R/R-3.6.1/library")
P <- assignmentPower(sire = sire.genotype,
dam = dam.genotype)
while (abs(0.99 - P) > 0.01) {
while (abs(0.99 - P) > 0.01) {
list_50mrk <- sample(c(1:100), 50)
sire.sub <- sire.genotype[, list_50mrk]
dam.sub <- dam.genotype[, list_50mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
abs(0.99 - P)
while (abs(0.99 - P) > 0.0001) {
list_50mrk <- sample(c(1:100), 50)
sire.sub <- sire.genotype[, list_50mrk]
dam.sub <- dam.genotype[, list_50mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
while (abs(0.99 - P) > 0.000001) {
list_50mrk <- sample(c(1:100), 50)
sire.sub <- sire.genotype[, list_50mrk]
dam.sub <- dam.genotype[, list_50mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
while (abs(0.99 - P) > 0.0001) {
list_50mrk <- sample(c(1:100), 50)
sire.sub <- sire.genotype[, list_50mrk]
dam.sub <- dam.genotype[, list_50mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
P <- assignmentPower(sire = sire.genotype,
dam = dam.genotype)
while (abs(0.99 - P) > 0.0001) {
list_50mrk <- sample(c(1:100), 50)
sire.sub <- sire.genotype[, list_50mrk]
dam.sub <- dam.genotype[, list_50mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
while (abs(0.99 - P) > 0.00001) {
list_50mrk <- sample(c(1:100), 50)
sire.sub <- sire.genotype[, list_50mrk]
dam.sub <- dam.genotype[, list_50mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
sire.genotype <- sire.sub
dam.genotype <- dam.sub
while (abs(0.95 - P) > 0.01) {
list_42mrk <- sample(c(1:50), 42)
sire.sub <- sire.genotype[, list_42mrk]
dam.sub <- dam.genotype[, list_42mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
while (abs(0.95 - P) > 0.001) {
list_42mrk <- sample(c(1:50), 42)
sire.sub <- sire.genotype[, list_42mrk]
dam.sub <- dam.genotype[, list_42mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
while (abs(0.95 - P) > 0.0001) {
list_42mrk <- sample(c(1:50), 42)
sire.sub <- sire.genotype[, list_42mrk]
dam.sub <- dam.genotype[, list_42mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
list_42mrk
list_50mrk
rm (list = ls())
setwd("C:/Users/rgriot/Desktop/Publication/APIS/package/exemple")
offspring.genotype  <- as.matrix(read.table('offspring_genotype.txt'))
sire.genotype       <- as.matrix(read.table('sire_genotype.txt'))
dam.genotype       <- as.matrix(read.table('dam_genotype.txt'))
# Subset 50 marqueurs (P = 0.99)
P <- assignmentPower(sire = sire.genotype,
dam = dam.genotype)
while (abs(0.99 - P) > 0.00001) {
pos_50mrk <- sample(c(1:100), 50)
list_50mrk <- colnames(sire.genotype)[pos_50mrk]
sire.sub <- sire.genotype[, pos_50mrk]
dam.sub <- dam.genotype[, pos_50mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
sire.genotype <- sire.sub
dam.genotype <- dam.sub
# Subbet 42 marqueurs (P = 0.95)
while (abs(0.95 - P) > 0.0001) {
pos_42mrk <- sample(c(1:50), 42)
list_42mrk <- colnames(sire.genotype)[pos_42mrk]
sire.sub <- sire.genotype[, pos_42mrk]
dam.sub <- dam.genotype[, pos_42mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
sire.genotype <- sire.sub
dam.genotype <- dam.sub
# Subbet 35 marqueurs (P = 0.9)
while (abs(0.9 - P) > 0.0001) {
pos_35mrk <- sample(c(1:42), 35)
list_35mrk <- colnames(sire.genotype)[pos_35mrk]
sire.sub <- sire.genotype[, pos_35mrk]
dam.sub <- dam.genotype[, pos_35mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
while (abs(0.9 - P) > 0.001) {
pos_35mrk <- sample(c(1:42), 35)
list_35mrk <- colnames(sire.genotype)[pos_35mrk]
sire.sub <- sire.genotype[, pos_35mrk]
dam.sub <- dam.genotype[, pos_35mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
while (abs(0.9 - P) > 0.01) {
pos_35mrk <- sample(c(1:42), 35)
list_35mrk <- colnames(sire.genotype)[pos_35mrk]
sire.sub <- sire.genotype[, pos_35mrk]
dam.sub <- dam.genotype[, pos_35mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
rm (list = ls())
setwd("C:/Users/rgriot/Desktop/Publication/APIS/package/exemple")
offspring.genotype  <- as.matrix(read.table('offspring_genotype.txt'))
sire.genotype       <- as.matrix(read.table('sire_genotype.txt'))
dam.genotype       <- as.matrix(read.table('dam_genotype.txt'))
# Subset 50 marqueurs (P = 0.99)
P <- assignmentPower(sire = sire.genotype,
dam = dam.genotype)
while (abs(0.99 - P) > 0.0001) {
pos_50mrk <- sample(c(1:100), 50)
list_50mrk <- colnames(sire.genotype)[pos_50mrk]
sire.sub <- sire.genotype[, pos_50mrk]
dam.sub <- dam.genotype[, pos_50mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
sire.genotype <- sire.sub
dam.genotype <- dam.sub
# Subbet 42 marqueurs (P = 0.95)
while (abs(0.95 - P) > 0.0001) {
pos_42mrk <- sample(c(1:50), 42)
list_42mrk <- colnames(sire.genotype)[pos_42mrk]
sire.sub <- sire.genotype[, pos_42mrk]
dam.sub <- dam.genotype[, pos_42mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
sire.genotype <- sire.sub
dam.genotype <- dam.sub
# Subbet 35 marqueurs (P = 0.9)
while (abs(0.9 - P) > 0.01) {
pos_35mrk <- sample(c(1:42), 35)
list_35mrk <- colnames(sire.genotype)[pos_35mrk]
sire.sub <- sire.genotype[, pos_35mrk]
dam.sub <- dam.genotype[, pos_35mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
while (abs(0.9 - P) > 0.001) {
pos_35mrk <- sample(c(1:42), 35)
list_35mrk <- colnames(sire.genotype)[pos_35mrk]
sire.sub <- sire.genotype[, pos_35mrk]
dam.sub <- dam.genotype[, pos_35mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
rm (list = ls())
setwd("C:/Users/rgriot/Desktop/Publication/APIS/package/exemple")
offspring.genotype  <- as.matrix(read.table('offspring_genotype.txt'))
sire.genotype       <- as.matrix(read.table('sire_genotype.txt'))
dam.genotype       <- as.matrix(read.table('dam_genotype.txt'))
# Subset 50 marqueurs (P = 0.99)
P <- assignmentPower(sire = sire.genotype,
dam = dam.genotype)
while (abs(0.99 - P) > 0.0001) {
pos_50mrk <- sample(c(1:100), 50)
list_50mrk <- colnames(sire.genotype)[pos_50mrk]
sire.sub <- sire.genotype[, pos_50mrk]
dam.sub <- dam.genotype[, pos_50mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
sire.genotype <- sire.sub
dam.genotype <- dam.sub
# Subbet 42 marqueurs (P = 0.95)
while (abs(0.95 - P) > 0.0001) {
pos_42mrk <- sample(c(1:50), 42)
list_42mrk <- colnames(sire.genotype)[pos_42mrk]
sire.sub <- sire.genotype[, pos_42mrk]
dam.sub <- dam.genotype[, pos_42mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
sire.genotype <- sire.sub
dam.genotype <- dam.sub
# Subbet 35 marqueurs (P = 0.9)
while (abs(0.9 - P) > 0.001) {
pos_35mrk <- sample(c(1:42), 35)
list_35mrk <- colnames(sire.genotype)[pos_35mrk]
sire.sub <- sire.genotype[, pos_35mrk]
dam.sub <- dam.genotype[, pos_35mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
rm (list = ls())
setwd("C:/Users/rgriot/Desktop/Publication/APIS/package/exemple")
offspring.genotype  <- as.matrix(read.table('offspring_genotype.txt'))
sire.genotype       <- as.matrix(read.table('sire_genotype.txt'))
dam.genotype       <- as.matrix(read.table('dam_genotype.txt'))
# Subset 50 marqueurs (P = 0.99)
P <- assignmentPower(sire = sire.genotype,
dam = dam.genotype)
while (abs(0.99 - P) > 0.0001) {
pos_50mrk <- sample(c(1:100), 50)
list_50mrk <- colnames(sire.genotype)[pos_50mrk]
sire.sub <- sire.genotype[, pos_50mrk]
dam.sub <- dam.genotype[, pos_50mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
sire.genotype <- sire.sub
dam.genotype <- dam.sub
# Subbet 42 marqueurs (P = 0.95)
while (abs(0.95 - P) > 0.0001) {
pos_42mrk <- sample(c(1:50), 42)
list_42mrk <- colnames(sire.genotype)[pos_42mrk]
sire.sub <- sire.genotype[, pos_42mrk]
dam.sub <- dam.genotype[, pos_42mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
sire.genotype <- sire.sub
dam.genotype <- dam.sub
# Subbet 35 marqueurs (P = 0.9)
while (abs(0.9 - P) > 0.01) {
pos_35mrk <- sample(c(1:42), 35)
list_35mrk <- colnames(sire.genotype)[pos_35mrk]
sire.sub <- sire.genotype[, pos_35mrk]
dam.sub <- dam.genotype[, pos_35mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
while (abs(0.9 - P) > 0.005) {
pos_35mrk <- sample(c(1:42), 35)
list_35mrk <- colnames(sire.genotype)[pos_35mrk]
sire.sub <- sire.genotype[, pos_35mrk]
dam.sub <- dam.genotype[, pos_35mrk]
P <- assignmentPower(sire = sire.sub,
dam = dam.sub)
}
length(list_42mrk %in% list_50mrk)
if (length(list_42mrk %in% list_50mrk) == 42) {
cat("42 marqueurs OK")
if (length(list_35mrk %in% list_42mrk) == 35) {
cat("35 marqueurs OK")
} else {}
} else {}
setwd("C:/Users/rgriot/Desktop/Publication/APIS/package/exemple")
offspring.genotype  <- as.matrix(read.table('offspring_genotype.txt'))
sire.genotype       <- as.matrix(read.table('sire_genotype.txt'))
dam.genotype       <- as.matrix(read.table('dam_genotype.txt'))
P_100 <- assignmentPower(sire = sire.genotype,
dam = dam.genotype)
P_50 <- assignmentPower(sire = sire.genotype[, which(colnames(sire.genotype) %in% list_50mrk)],
dam = dam.genotype[, which(colnames(dam.genotype) %in% list_50mrk)])
P_100 <- assignmentPower(sire = sire.genotype,
dam = dam.genotype)
P_50 <- assignmentPower(sire = sire.genotype[, which(colnames(sire.genotype) %in% list_50mrk)],
dam = dam.genotype[, which(colnames(dam.genotype) %in% list_50mrk)])
P_42 <- assignmentPower(sire = sire.genotype[, which(colnames(sire.genotype) %in% list_42mrk)],
dam = dam.genotype[, which(colnames(dam.genotype) %in% list_42mrk)])
P_35 <- assignmentPower(sire = sire.genotype[, which(colnames(sire.genotype) %in% list_35mrk)],
dam = dam.genotype[, which(colnames(dam.genotype) %in% list_35mrk)])
list_1 <- list_35mrk
list_2 <- c(list_35mrk, list_42mrk[-which(list_42mrk %in% list_35mrk)])
list_1
list_2
list_3 <- c(list_2, list_50mrk[-which(list_50mrk %in% list_2)])
list_4 <- c(list_3, colnames(offspring.genotype)[-which(colnames(offspring.genotype) %in% list_3)])
which(list1 %in% list2)
which(list_1 %in% list_2)
if (which(list_1 %in% list_2) == c(1:35)) {
print("Liste 1 OK")
if (which(list_2 %in% list_3) == c(1:42)) {
print("Liste 2 OK")
if (which(list_3 %in% list_4) == c(1:50)) {
print("Liste 3 OK")
}
}
}
if (which(list_1 %in% list_2) == c(1:35)) {
print("Liste 1 OK")
if (which(list_2 %in% list_3) == c(1:42)) {
print("Liste 2 OK")
if (which(list_3 %in% list_4) == c(1:50)) {
print("Liste 3 OK")
} else {}
} else {}
} else {}
which(list_1 %in% list_2) == c(1:35)
which(list_2 %in% list_3) == c(1:42)
which(list_3 %in% list_4) == c(1:50)
APIS_offspring <- offspring.genotype[, which(colnames(offspring.genotype) %in% list_4)]
APIS_sire <- sire.genotype[, which(colnames(sire.genotype) %in% list_4)]
APIS_dam <- dam.genotype[, which(colnames(dam.genotype) %in% list_4)]
P1 <- assignmentPower(sire = sire.genotype[,1:35],
dam = dam.genotype[,1:35])
list_4
list_35mrk
colnames(APIS_offspring)
colnames(offspring.genotype) %in% list_4
which(colnames(offspring.genotype) %in% list_4
)
which(list_4 %in% colnames(offspring.genotype))
APIS_offspring <- offspring.genotype[, match(x = colnames(offspring.genotype), table = list_4)]
# Verification
colnames(APIS_offspring)
APIS_offspring <- offspring.genotype[, match(x = colnames(offspring.genotype), table = list_4)]
APIS_sire <- sire.genotype[, match(x = colnames(sire.genotype), table = list_4)]
APIS_dam <- dam.genotype[, match(x = colnames(dam.genotype), table = list_4)]
P1 <- assignmentPower(sire = APIS_sire[,1:35],
dam = APIS_dam[,1:35])
colnames(sire.genotype)
colnames(APIS_offspring)
match(x = colnames(offspring.genotype), table = list_4)]
APIS_offspring <- offspring.genotype[, match(table = colnames(offspring.genotype), x = list_4)]
colnames(APIS_offspring)
APIS_offspring <- offspring.genotype[, match(table = colnames(offspring.genotype), x = list_4)]
APIS_sire <- sire.genotype[, match(table = colnames(sire.genotype), x = list_4)]
APIS_dam <- dam.genotype[, match(table = colnames(dam.genotype), x = list_4)]
P1 <- assignmentPower(sire = APIS_sire[,1:35],
dam = APIS_dam[,1:35])
P1 <- assignmentPower(sire = APIS_sire[,1:35],
dam = APIS_dam[,1:35])
P2 <- assignmentPower(sire = APIS_sire[,1:42],
dam = APIS_dam[,1:42])
P3 <- assignmentPower(sire = APIS_sire[,1:50],
dam = APIS_dam[,1:50])
P4 <- assignmentPower(sire = APIS_sire[,1:100],
dam = APIS_dam[,1:100])
colnames(APIS_offspring)
colnames(APIS_offspring) <- paste0("marker_", c(1:100))
colnames(APIS_offspring)
colnames(APIS_sire) <- colnames(APIS_offspring)
colnames(APIS_dam) <- colnames(APIS_offspring)
write.table(APIS_offspring, "APIS_offspring.txt", quote = F, sep = " ", col.names = T, row.names = T)
write.table(APIS_sire, "APIS_sire.txt", quote = F, sep = " ", col.names = T, row.names = T)
write.table(APIS_dam, "APIS_dam.txt", quote = F, sep = " ", col.names = T, row.names = T)
rm(list = ls())
setwd("C:/Users/rgriot/Desktop/Publication/APIS/package/exemple")
offspring.genotype_100mrk <- as.matrix(read.table('APIS_offspring.txt'))
sire.genotype_100mrk <- as.matrix(read.table('APIS_sire.txt'))
dam.genotype_100mrk <- as.matrix(read.table('APIS_dam.txt'))
APIS_100markers <- list(
APIS_offspring = offspring.genotype_100mrk,
APIS_sire = sire.genotype_100mrk,
APIS_dam = dam.genotype_100mrk
)
setwd("D:/Data_RG/package_APIS/APIS")
walk2(APIS_100markers, names(APIS_100markers), function(obj, name) {
assign(name, obj)
do.call("use_data", list(as.name(name), overwrite = TRUE))
})
library("purrr", lib.loc="C:/Program Files/R/R-3.6.1/library")
setwd("D:/Data_RG/package_APIS/APIS")
walk2(APIS_100markers, names(APIS_100markers), function(obj, name) {
assign(name, obj)
do.call("use_data", list(as.name(name), overwrite = TRUE))
})
library("devtools", lib.loc="C:/Program Files/R/R-3.6.1/library")
setwd("D:/Data_RG/package_APIS/APIS")
walk2(APIS_100markers, names(APIS_100markers), function(obj, name) {
assign(name, obj)
do.call("use_data", list(as.name(name), overwrite = TRUE))
})
data(APIS_offspring)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.pos = 'ht !'
)
data("APIS_offspring")
data("APIS_sire")
data("APIS_dam")
head(APIS_offspring[,1:10])
rownames(APIS_offspring[1:6,])
devtools::use_vignette("APIS_vignette", pkg = "APIS")
install_github("rgriot/APIS")
install_github("rgriot/APIS", dependencies = T, INSTALL_opts = c("--no-lock"))
install_github("rgriot/APIS", dependencies = T, INSTALL_opts = c("--no-lock"))
library(APIS)
install_github("rgriot/APIS", dependencies = T, INSTALL_opts = c("--no-lock"))
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
setwd("D:/Data_RG/package_APIS/APIS/src")
system("R CMD SHLIB likelihoodCalc.f90")
devtools::check()
build()
system("R CMD build")
system("R CMD build APIS")
setwd("D:/Data_RG/package_APIS")
system("R CMD build APIS")
system("R CMD check APIS_0.1.0.tar.gz")
setwd("D:/Data_RG/package_APIS/APIS/src")
system("R CMD SHLIB likelihoodCalc.f90")
build()
devtools::build()
system("R CMD check APIS_0.1.0.tar.gz")
setwd("D:/Data_RG/package_APIS")
system("R CMD check APIS_0.1.0.tar.gz")
library(APIS)
data("APIS_offspring")
data("APIS_dam")
data("APIS_sire")
result <- APIS(APIS_offspring,)
result <- APIS(off.genotype = APIS_offspring,
dam.genotype = APIS_dam,
sire.genotype = APIS_sire,
error = 0.05)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.pos = 'ht !'
)
library(devtools)
library(devtools)
install_github("rgriot/APIS", dependencies = T)
library(APIS)
library(devtools)
install_github("rgriot/APIS", dependencies = T)
library(APIS)
library(devtools)
install_github("rgriot/APIS", dependencies = T)
library(APIS)
install_github("rgriot/APIS")
install_github("rgriot/APIS")
install_github("rgriot/APIS")
system("R CMD check --as-cran APIS_0.1.0.tar.gz")
if (parallel::detectCores() - 2 <= 1)
parallel::detectCores()
parallel::detectCores() - 2 <= 1
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.pos = 'ht !'
)
library(devtools)
install_github("rgriot/APIS", dependencies = T)
library(APIS)
library(APIS)
data("APIS_offspring")
data("APIS_dam")
data("APIS_sire")
result <- APIS(off.genotype = APIS_offspring,
dam.genotype = APIS_dam,
sire.genotype = APIS_sire,
error = 0.05)
result <- APIS(off.genotype = APIS_offspring,
dam.genotype = APIS_dam,
sire.genotype = APIS_sire,
error = 0.05,
nb.cores = detectCores() - 1)
detectCores()
library(parallel)
detectCores()
result <- APIS(off.genotype = APIS_offspring,
dam.genotype = APIS_dam,
sire.genotype = APIS_sire,
error = 0.05,
nb.cores = detectCores() - 1)
nb.cores = detectCores() - 1
cat("Number of cores used :", nb.cores)
library(APIS)
data("APIS_offspring")
data("APIS_dam")
data("APIS_sire")
result <- APIS(off.genotype = APIS_offspring,
dam.genotype = APIS_dam,
sire.genotype = APIS_sire,
error = 0.05,
nb.cores = detectCores() - 1)
result <- APIS(off.genotype = APIS_offspring,
dam.genotype = APIS_dam,
sire.genotype = APIS_sire,
error = 0.05)
