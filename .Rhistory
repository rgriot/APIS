library(devtools)
install.packages("roxygen2")
install_github("devtools", "hadley")
load_all()
load_all()
load_all()
library(APIS)
load_all()
devtools::install("APIS")
devtools::install("APIS")
load_all()
library(APIS)
devtools::document("APIS")
library(devtools)
install.packages("devtools")
devtools::document("APIS")
library(devtools)
devtools::document("APIS")
devtools::document("APIS")
devtools::document("APIS")
devtools::document("APIS")
setwd("D:/Data_RG/package APIS/APIS")
library(APIS)
library(devtools)
devtools::document("APIS")
document("APIS")
library(roxygen2)
document("APIS")
document()
library(APIS)
document()
library(APIS)
document()
library(APIS)
document()
library(APIS)
devtools::use_vignette("APIS_vignette")
install.packages("rmarkdown")
devtools::use_vignette("APIS_vignette")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
plot(1:10)
plot(10:1)
knitr::kable(head(mtcars, 10))
# =================================================
# Analyses des sorties de r??chantillonnage des p?res
# ====================================================
# Initialisation
rm(list = ls())
setwd("D:/Data_RG/Package_Assignation_nouveau/Package_Assignation_nouveau/reechantillonnageSir")
# Recuperation des fichiers
listFile <- list.files(pattern = 'per.txt')
# Resultats a exporter
output <- as.data.frame(matrix(NA, nrow = length(listFile), ncol = 11))
colnames(output) <- c('N0', 'N1', 'N2', 'N3', 'N4', 'N5', 'assignation', 'erreur', 'sdErreur', 'maxErreur', 'nb>erreur')
rownames(output) <- c(1:16)
cpt <- 1
par(mfrow = c(4,4))
tot <- rep(NA, 13)
for (i in listFile) {
data <- read.table(i, row.names = 1, sep = ' ')
colnames(data) <- paste0('N', c(0:5))
result = as.data.frame(t(apply(data, 2, sum)))
data$bonne_assignation  <- 100 * (data$N1 + data$N2 + data$N4) / data$N0
data$erreur       <- 100 * (data$N2 + data$N4) / (data$N1 + data$N2 + data$N4)
data$Geno         <- data$N0 - (data$N4 + data$N5)
data$per          <- as.integer(substring(strsplit(i, '_')[[1]][3], 1, 1))
data$P            <- as.integer(strsplit(strsplit(i, '_')[[1]][2], 'p')[[1]][2])
data$missing      <- as.integer(strsplit(strsplit(i, '_')[[1]][2], 'p')[[1]][1])
tot <- rbind(tot, data)
colnames(result) <- paste0('N', c(0:5))
result$assignation <- mean(data$assignation)
result$erreur      <- mean(data$erreur)
result$sdErreur    <- sd(data$erreur)
result$maxErreur   <- max(data$erreur)
perErreur <- as.integer(substring(strsplit(i, '_')[[1]][3], 1, 1))
result$nbSup       <- length(which(data$erreur > as.numeric(perErreur)))
output[cpt,] <- result
rownames(output)[cpt] <- substring(i, 19, nchar(i))
plot(x = data$Geno, y = data$erreur, main = substring(i, 19, nchar(i)))
cpt = cpt + 1
}
warnings
warnings()
data <- read.table(i, row.names = 1, sep = ' ')
colnames(data) <- paste0('N', c(0:5))
result = as.data.frame(t(apply(data, 2, sum)))
data$bonne_assignation  <- 100 * (data$N1 + data$N2 + data$N4) / (data$N1 + data$N2 + data$N4)
data$mauvaise_assignation <- 100 * (data$N2 + data$N4) / (data$N1 + data$N2 + data$N4)
data$Geno         <- data$N0 - (data$N4 + data$N5)
data$per          <- as.integer(substring(strsplit(i, '_')[[1]][3], 1, 1))
data$P            <- as.integer(strsplit(strsplit(i, '_')[[1]][2], 'p')[[1]][2])
data$missing      <- as.integer(strsplit(strsplit(i, '_')[[1]][2], 'p')[[1]][1])
View(data)
data$bonne_assignation  <- 100 * (data$N1) / (data$N1 + data$N2 + data$N4)
data$mauvaise_assignation <- 100 * (data$N2 + data$N4) / (data$N1 + data$N2 + data$N4)
data$Geno         <- data$N0 - (data$N4 + data$N5)
data$per          <- as.integer(substring(strsplit(i, '_')[[1]][3], 1, 1))
data$P            <- as.integer(strsplit(strsplit(i, '_')[[1]][2], 'p')[[1]][2])
data$missing      <- as.integer(strsplit(strsplit(i, '_')[[1]][2], 'p')[[1]][1])
View(data)
colnames(result) <- paste0('N', c(0:5))
result$mean_bonne <- mean(data$bonne_assignation)
result$sd_bonne   <- sd(data$bonne_assignation)
result$mean_mauvaise <- mean(data$mauvaise_assignation)
result$sd_mauvaise   <- sd(data$mauvaise_assignation)
perErreur <- as.integer(substring(strsplit(i, '_')[[1]][3], 1, 1))
result$nbSup       <- length(which(data$erreur > as.numeric(perErreur)))
output[cpt,] <- result
rownames(output)[cpt] <- substring(i, 19, nchar(i))
View(result)
colnames(result) <- paste0('N', c(0:5))
result$mean_bonne <- mean(data$bonne_assignation)
result$sd_bonne   <- sd(data$bonne_assignation)
result$mean_mauvaise <- mean(data$mauvaise_assignation)
result$sd_mauvaise   <- sd(data$mauvaise_assignation)
colnames(result) <- paste0('N', c(0:5))
result$mean_bonne <- mean(data$bonne_assignation)
result$sd_bonne   <- sd(data$bonne_assignation)
result$mean_mauvaise <- mean(data$mauvaise_assignation)
result$sd_mauvaise   <- sd(data$mauvaise_assignation)
data <- read.table(i, row.names = 1, sep = ' ')
colnames(data) <- paste0('N', c(0:5))
result = as.data.frame(t(apply(data, 2, sum)))
data$bonne_assignation  <- 100 * (data$N1) / (data$N1 + data$N2 + data$N4)
data$mauvaise_assignation <- 100 * (data$N2 + data$N4) / (data$N1 + data$N2 + data$N4)
data$Geno         <- data$N0 - (data$N4 + data$N5)
data$per          <- as.integer(substring(strsplit(i, '_')[[1]][3], 1, 1))
data$P            <- as.integer(strsplit(strsplit(i, '_')[[1]][2], 'p')[[1]][2])
data$missing      <- as.integer(strsplit(strsplit(i, '_')[[1]][2], 'p')[[1]][1])
tot <- rbind(tot, data)
colnames(result) <- paste0('N', c(0:5))
result$mean_bonne <- mean(data$bonne_assignation)
result$sd_bonne   <- sd(data$bonne_assignation)
result$mean_mauvaise <- mean(data$mauvaise_assignation)
result$sd_mauvaise   <- sd(data$mauvaise_assignation)
perErreur <- as.integer(substring(strsplit(i, '_')[[1]][3], 1, 1))
result$nbSup       <- length(which(data$erreur > as.numeric(perErreur)))
output[cpt,] <- result
rownames(output)[cpt] <- substring(i, 19, nchar(i))
# plot(x = data$Geno, y = data$erreur, main = substring(i, 19, nchar(i)))
cpt = cpt + 1
rownames(output)
rownames(output)[cpt]
View(output)
# =================================================
# Analyses des sorties de r??chantillonnage des p?res
# ====================================================
# Initialisation
rm(list = ls())
setwd("D:/Data_RG/Package_Assignation_nouveau/Package_Assignation_nouveau/reechantillonnageSir")
# Recuperation des fichiers
listFile <- list.files(pattern = 'per.txt')
# Resultats a exporter
output <- as.data.frame(matrix(NA, nrow = length(listFile), ncol = 11))
colnames(output) <- c('N0', 'N1', 'N2', 'N3', 'N4', 'N5', 'assignation', 'erreur', 'sdErreur', 'maxErreur', 'nb>erreur')
rownames(output) <- c(1:16)
cpt <- 1
par(mfrow = c(4,4))
tot <- rep(NA, 13)
for (i in listFile) {
data <- read.table(i, row.names = 1, sep = ' ')
colnames(data) <- paste0('N', c(0:5))
result = as.data.frame(t(apply(data, 2, sum)))
data$bonne_assignation  <- 100 * (data$N1) / (data$N1 + data$N2 + data$N4)
data$mauvaise_assignation <- 100 * (data$N2 + data$N4) / (data$N1 + data$N2 + data$N4)
data$Geno         <- data$N0 - (data$N4 + data$N5)
data$per          <- as.integer(substring(strsplit(i, '_')[[1]][3], 1, 1))
data$P            <- as.integer(strsplit(strsplit(i, '_')[[1]][2], 'p')[[1]][2])
data$missing      <- as.integer(strsplit(strsplit(i, '_')[[1]][2], 'p')[[1]][1])
tot <- rbind(tot, data)
colnames(result) <- paste0('N', c(0:5))
result$mean_bonne <- mean(data$bonne_assignation)
result$sd_bonne   <- sd(data$bonne_assignation)
result$mean_mauvaise <- mean(data$mauvaise_assignation)
result$sd_mauvaise   <- sd(data$mauvaise_assignation)
perErreur <- as.integer(substring(strsplit(i, '_')[[1]][3], 1, 1))
result$nbSup       <- length(which(data$erreur > as.numeric(perErreur)))
output[cpt,] <- result
rownames(output)[cpt] <- substring(i, 19, nchar(i))
# plot(x = data$Geno, y = data$erreur, main = substring(i, 19, nchar(i)))
cpt = cpt + 1
}
View(output)
# =================================================
# Analyses des sorties de r??chantillonnage des p?res
# ====================================================
# Initialisation
rm(list = ls())
setwd("D:/Data_RG/Package_Assignation_nouveau/Package_Assignation_nouveau/reechantillonnageSir")
# Recuperation des fichiers
listFile <- list.files(pattern = 'per.txt')
# Resultats a exporter
output <- as.data.frame(matrix(NA, nrow = length(listFile), ncol = 11))
colnames(output) <- c('N0', 'N1', 'N2', 'N3', 'N4', 'N5', 'bonne_assignation', 'sd_bonne', 'mauvaise_assignation', 'sd_mauvaise', 'nb>erreur')
rownames(output) <- c(1:16)
cpt <- 1
par(mfrow = c(4,4))
tot <- rep(NA, 13)
for (i in listFile) {
data <- read.table(i, row.names = 1, sep = ' ')
colnames(data) <- paste0('N', c(0:5))
result = as.data.frame(t(apply(data, 2, sum)))
data$bonne_assignation  <- 100 * (data$N1) / (data$N1 + data$N2 + data$N4)
data$mauvaise_assignation <- 100 * (data$N2 + data$N4) / (data$N1 + data$N2 + data$N4)
data$Geno         <- data$N0 - (data$N4 + data$N5)
data$per          <- as.integer(substring(strsplit(i, '_')[[1]][3], 1, 1))
data$P            <- as.integer(strsplit(strsplit(i, '_')[[1]][2], 'p')[[1]][2])
data$missing      <- as.integer(strsplit(strsplit(i, '_')[[1]][2], 'p')[[1]][1])
tot <- rbind(tot, data)
colnames(result) <- paste0('N', c(0:5))
result$mean_bonne <- mean(data$bonne_assignation)
result$sd_bonne   <- sd(data$bonne_assignation)
result$mean_mauvaise <- mean(data$mauvaise_assignation)
result$sd_mauvaise   <- sd(data$mauvaise_assignation)
perErreur <- as.integer(substring(strsplit(i, '_')[[1]][3], 1, 1))
result$nbSup       <- length(which(data$erreur > as.numeric(perErreur)))
output[cpt,] <- result
rownames(output)[cpt] <- substring(i, 19, nchar(i))
# plot(x = data$Geno, y = data$erreur, main = substring(i, 19, nchar(i)))
cpt = cpt + 1
}
View(output)
write.table(output, 'resultats_reechantillonnageSir.txt', col.names = T, row.names = T, quote = F, sep = " ")
write.table(output, 'resultats_reechantillonnageSir.txt', col.names = T, row.names = T, quote = F, sep = " ")
