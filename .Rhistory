p_id <- 1 # sire A/A
} else if (p_mrk[1]==off_mrk[2]) {
p_id <- 3 # sire B/B
} else {
p_id <- 6 # sire C/C
}
} else { # If the sire is HETEROZYGOUS
if ((p_mrk[1]==off_mrk[1]|p_mrk[2]==off_mrk[1])&(p_mrk[1]==off_mrk[2]|p_mrk[2]==off_mrk[2])) {
p_id <- 2 # sire A/B
} else if ((p_mrk[1]==off_mrk[1]|p_mrk[2]==off_mrk[1])&(p_mrk[1]!=off_mrk[2]|p_mrk[2]!=off_mrk[2])){
p_id <- 4 # sire A/C
} else if ((p_mrk[1]!=off_mrk[1]|p_mrk[2]!=off_mrk[1])&(p_mrk[1]==off_mrk[2]|p_mrk[2]==off_mrk[2])) {
p_id <- 5 # sire B/C
} else {
p_id <- 6 # sire C/C
}
}
# DAM ID
if (m_mrk[1]==m_mrk[2]) { # If the dam is HOMOZYGOUS
if (m_mrk[1]=='NA') {
m_id <- 7 # dam NA/NA
}else if (m_mrk[1]==off_mrk[1]) {
m_id <- 1 # dam A/A
} else if (m_mrk[1]==off_mrk[2]) {
m_id <- 3 # dam B/B
} else {
m_id <- 6 # dam C/C
}
} else { # If the dam is HETEROZYGOUS
if ((m_mrk[1]==off_mrk[1]|m_mrk[2]==off_mrk[1])&(m_mrk[1]==off_mrk[2]|m_mrk[2]==off_mrk[2])) {
m_id <- 2 # dam A/B
} else if ((m_mrk[1]==off_mrk[1]|m_mrk[2]==off_mrk[1])&(m_mrk[1]!=off_mrk[2]|m_mrk[2]!=off_mrk[2])){
m_id <- 4 # dam A/C
} else if ((m_mrk[1]!=off_mrk[1]|m_mrk[2]!=off_mrk[1])&(m_mrk[1]==off_mrk[2]|m_mrk[2]==off_mrk[2])) {
m_id <- 5 # dam B/C
} else {
m_id <- 6 # dam C/C
}
}
# Get the score for tested marker
sc_exclu[mrk] <- hetero_exclu[m_id,p_id]
sc_like[mrk] <- table_like[[mrk]][m_id, p_id]
}
mrk <- mrk + 1
}
# Create the parallel loop output
r <- c(NA,NA)
r[1] <- sum(sc_exclu) # Number of missmatch
r[2] <- exp(sum(log(sc_like))/ped.log[off,2]) # Mendelian transimission probability
return(r)
}
# Working on the results
res[,3:4] <- t
res <- as.data.frame(res)
res$sire <- as.character(res$sire)
res$dam <- as.character(res$dam)
res$score_exclu <- as.numeric(as.character(res$score_exclu))
res$P_mendel <- as.numeric(as.character(res$P_mendel))
# Order by Mendelian transmission probabilities
res2 <- res[order(res[,4], res[,3], decreasing = T),]
delta_P12 <- res2[1,4]-res2[2,4]
delta_P23 <- res2[2,4]-res2[3,4]
p_fin <- res2[1,1]
m_fin <- res2[1,2]
ped.out <- c(rownames(tmp), NA, NA)
if (is.na(p_fin)&is.na(m_fin)) {
ped.out[2:3] <- c(NA, NA)
} else {
ped.out[2:3] <- c(p_fin,m_fin)
}
log.out <- unlist(c(ped.out[1], ped.log[off,2], ped.out[2:3], res2[1, 3:4],
res2[2,1:4], delta_P12,
res2[3,1:4], delta_P23))
# Order by mismatches
res2 <- res[order(res[,3], -res[,4], decreasing = F),]
exclu.out <- unlist(c(log.out[1],ped.log[off,2], res2[1,1:3], res2[2,1:3], res2[3,1:3]))
a <- list(ped.out, log.out, exclu.out)
}
off <- 1
tmp <- offspring[off,, drop = F]
# Create temporary results
potential.parents <- selectParents(tmp, parent.genotype = parent.genotype,
parent.sex = parent.sex)
potential.sire <- potential.parents$sire_toKeep
potential.dam <- potential.parents$dam_toKeep
res <- matrix(NA, nrow = (length(potential.sire)*length(potential.dam)), ncol = 4)
colnames(res) <- c('sire', 'dam', 'score_exclu', 'P_mendel')
res[,1] <- rep(potential.sire, each = length(potential.dam))
res[,2] <- rep(potential.dam, times = length(potential.sire))
# Lielihood tables
table_like <- vector('list', x.col)
off_geno <- strsplit(tmp, split = "/", fixed = T)
for (i in 1:length(tmp)) {
if (off_geno[[i]][1]==off_geno[[i]][2]) {
fa <- Freq[i,which(colnames(Freq)==paste0('Freq_',off_geno[[i]][1]))]
fa <- ifelse(test = (fa==0|is.na(fa)), yes = Freq[i,which(colnames(Freq)==paste0('Freq_NA'))], no = fa)
table_like[[i]] <- matrix(c(1,0.5,e,fa,0.5,0.25,e,0.5*fa,e,e,e,e,fa,0.5*fa,e,fa*fa), nrow = 4, ncol = 4)
} else {
fa <- Freq[i,which(colnames(Freq)==paste0('Freq_',off_geno[[i]][1]))]
fa <- ifelse(test = (fa==0|is.na(fa)), yes = Freq[i,which(colnames(Freq)==paste0('Freq_NA'))], no = fa)
fb <- Freq[i,which(colnames(Freq)==paste0('Freq_',off_geno[[i]][2]))]
fb <- ifelse(test = (fb==0|is.na(fb)), yes = Freq[i,which(colnames(Freq)==paste0('Freq_NA'))], no = fb)
table_like[[i]] <- matrix(c(e,0.5,1,e,0.5,e,fb,
0.5,0.5,0.5,0.25,0.5,e,0.5*(fa+fb),
1,0.5,e,0.5,e,e,fa,
e,0.25,0.5,e,0.25,e,0.5*fb,
0.5,0.25,e,0.25,e,e,0.5*fb,
e,e,e,e,e,e,e,
fb,0.5*(fa+fb),fa,0.5*fb,0.5*fa,e,2*fa*fb), nrow = 7, ncol = 7)
}
}
t <- foreach(n = 1:nrow(res), .combine = rbind,
.multicombine = T, .packages = c('foreach', 'doParallel', 'doSNOW')) %dopar% { # For each parents pair
#p = sire // m = dam
p <- sire[which(rownames(sire)==res[n,1]),, drop = F]
m <- dam[which(rownames(dam)==res[n,2]),, drop = F]
# Keep likelihood and missmatches
sc_exclu <- vector(mode = 'numeric', length = x.col)
sc_like <- vector(mode = 'numeric', length = x.col)
off_split <- strsplit(tmp, split = "/", fixed = T)
p_split <- strsplit(p, split = "/", fixed = T)
m_split <- strsplit(m, split = "/", fixed = T)
mrk <- 1
while (mrk <= x.col & sum(sc_exclu) <= thresh) { # For each marker
off_mrk <- off_split[[mrk]]
p_mrk <- p_split[[mrk]]
m_mrk <- m_split[[mrk]]
if (off_mrk[1]=='NA'&off_mrk[2]=='NA') { # if offspring genotype is missing
sc_exclu[mrk] <- 0
sc_like[mrk] <- 1
} else if (off_mrk[1]==off_mrk[2]&off_mrk[1]!='NA') { #If offspring is HOMOZYGOUS
# SIRE ID
if (p_mrk[1]==p_mrk[2]) { # If the sire is HOMOZYGOUS
if (p_mrk[1]=='NA') {
p_id <- 4 # sire NA/NA
}else if (p_mrk[1]==off_mrk[1]) {
p_id <- 1 # sire A/A
} else {
p_id <- 3 # sire "C/C"
}
} else { # If the sire is HETEROZYGOUS
if ((p_mrk[1]!=off_mrk[1]&p_mrk[2]!=off_mrk[1])&(p_mrk[1]!=off_mrk[2]&p_mrk[2]!=off_mrk[2])) {
p_id <- 3 # sire C/C
} else {
p_id <- 2 # sire A/C
}
}
#DAM ID
if (m_mrk[1]==m_mrk[2]) { #If the dam is HOMOZYGOUS
if (m_mrk[1]=='NA') {
m_id <- 4 # dam NA/NA
}else if (m_mrk[1]==off_mrk[1]) {
m_id <- 1 # dam A/A
} else {
m_id <- 3 # dam C/C
}
} else { # If the dam is HETEROZYGOUS
if ((m_mrk[1]!=off_mrk[1]&m_mrk[2]!=off_mrk[1])&(m_mrk[1]!=off_mrk[2]&m_mrk[2]!=off_mrk[2])) {
m_id <- 3 # dam C/C
} else {
m_id <- 2 # dam A/C
}
}
sc_exclu[mrk] <- homo_exclu[m_id,p_id]
sc_like[mrk] <- table_like[[mrk]][m_id, p_id]
} else { #If the offspring is HETEROZYGOUS
# SIRE ID
if (p_mrk[1]==p_mrk[2]) { # If the sire is HOMOZYGOUS
if (p_mrk[1]=='NA') {
p_id <- 7 # sire NA/NA
}else if (p_mrk[1]==off_mrk[1]) {
p_id <- 1 # sire A/A
} else if (p_mrk[1]==off_mrk[2]) {
p_id <- 3 # sire B/B
} else {
p_id <- 6 # sire C/C
}
} else { # If the sire is HETEROZYGOUS
if ((p_mrk[1]==off_mrk[1]|p_mrk[2]==off_mrk[1])&(p_mrk[1]==off_mrk[2]|p_mrk[2]==off_mrk[2])) {
p_id <- 2 # sire A/B
} else if ((p_mrk[1]==off_mrk[1]|p_mrk[2]==off_mrk[1])&(p_mrk[1]!=off_mrk[2]|p_mrk[2]!=off_mrk[2])){
p_id <- 4 # sire A/C
} else if ((p_mrk[1]!=off_mrk[1]|p_mrk[2]!=off_mrk[1])&(p_mrk[1]==off_mrk[2]|p_mrk[2]==off_mrk[2])) {
p_id <- 5 # sire B/C
} else {
p_id <- 6 # sire C/C
}
}
# DAM ID
if (m_mrk[1]==m_mrk[2]) { # If the dam is HOMOZYGOUS
if (m_mrk[1]=='NA') {
m_id <- 7 # dam NA/NA
}else if (m_mrk[1]==off_mrk[1]) {
m_id <- 1 # dam A/A
} else if (m_mrk[1]==off_mrk[2]) {
m_id <- 3 # dam B/B
} else {
m_id <- 6 # dam C/C
}
} else { # If the dam is HETEROZYGOUS
if ((m_mrk[1]==off_mrk[1]|m_mrk[2]==off_mrk[1])&(m_mrk[1]==off_mrk[2]|m_mrk[2]==off_mrk[2])) {
m_id <- 2 # dam A/B
} else if ((m_mrk[1]==off_mrk[1]|m_mrk[2]==off_mrk[1])&(m_mrk[1]!=off_mrk[2]|m_mrk[2]!=off_mrk[2])){
m_id <- 4 # dam A/C
} else if ((m_mrk[1]!=off_mrk[1]|m_mrk[2]!=off_mrk[1])&(m_mrk[1]==off_mrk[2]|m_mrk[2]==off_mrk[2])) {
m_id <- 5 # dam B/C
} else {
m_id <- 6 # dam C/C
}
}
# Get the score for tested marker
sc_exclu[mrk] <- hetero_exclu[m_id,p_id]
sc_like[mrk] <- table_like[[mrk]][m_id, p_id]
}
mrk <- mrk + 1
}
# Create the parallel loop output
r <- c(NA,NA)
r[1] <- sum(sc_exclu) # Number of missmatch
r[2] <- exp(sum(log(sc_like))/ped.log[off,2]) # Mendelian transimission probability
return(r)
}
t
tmp <- offspring[off,, drop = F]
# Create temporary results
potential.parents <- selectParents(tmp, parent.genotype = parent.genotype,
parent.sex = parent.sex)
potential.parents
off.genotype <- tmp
# Initialize the variables
parent_toKeep <- 5
i <- 1
output <- data.frame(parent = rownames(parent.genotype),
sex = parent.sex,
mismatch = NA)
output$parent <- as.character(output$parent)
# Create the probability tables
off.geno <- strsplit(off.genotype, split = '/')
probability_table <- vector('list', length(off.genotype))
for (m in c(1:length(off.genotype))) {
# If the offspring is homozygous
if (off.geno[[m]][1] == off.geno[[m]][2]) {
probability_table[[m]] <- c(0, 0, 1, NA)
} else {
probability_table[[m]] <- c(0, 0, 0, 0, 0, 1, NA)
}
}
# Loop over all the parents
for (p in output$parent) {
p.geno <- parent.genotype[which(rownames(parent.genotype) %in% p),]
p.geno <- strsplit(p.geno, split = '/')
# Probability
parent_probability <- rep(NA, length(p.geno))
# Loop over all the markers
for (m in c(1:length(off.genotype))) {
off.mrk <- off.geno[[m]]
p.mrk <- p.geno[[m]]
if (off.mrk[1] == off.mrk[2] & off.mrk[1] == 'NA') { # If offspring is NA/NA
parent_probability[m] <- 1
} else if (off.mrk[1] == off.mrk[2] & off.mrk[1] != 'NA') { # If offspring is homozygous
# Check parent genotype
if (p.mrk[1] == p.mrk[2] & p.mrk[1] == 'NA') { # parent NA/NA
parent_probability[m] <- probability_table[[m]][4]
} else if (p.mrk[1] == p.mrk[2] & p.mrk[1] != 'NA') {
if (p.mrk[1] == off.mrk[1]) { # parent A/A
parent_probability[m] <- probability_table[[m]][1]
} else { # parent C/C
parent_probability[m] <- probability_table[[m]][3]
}
} else { # parent heterozygous
if ((p.mrk[1] != off.mrk[1] & p.mrk[2] != off.mrk[1]) & (p.mrk[1] != off.mrk[2] & p.mrk[2] != off.mrk[2])) {
parent_probability[m] <- probability_table[[m]][3]
} else {
parent_probability[m] <- probability_table[[m]][2]
}
}
} else { # If offspring is heterozygous
if (p.mrk[1] == p.mrk[2]) { # parent homzygous
if (p.mrk[1] == 'NA') { # parent NA/NA
parent_probability[m] <- probability_table[[m]][7]
} else if (p.mrk[1] == off.mrk[1]) { # parent A/A
parent_probability[m] <- probability_table[[m]][1]
} else if (p.mrk[1] == off.mrk[2]) { # parent B/B
parent_probability[m] <- probability_table[[m]][3]
} else { # parent C/C
parent_probability[m] <- probability_table[[m]][6]
}
} else { # parent heterozygous
if ((p.mrk[1] == off.mrk[1] | p.mrk[2] == off.mrk[1]) & (p.mrk[1] == off.mrk[2] | p.mrk[2] == off.mrk[2])) {
# parent A/B
parent_probability[m] <- probability_table[[m]][2]
} else if ((p.mrk[1] == off.mrk[1] | p.mrk[2] == off.mrk[1]) & (p.mrk[1] != off.mrk[2] | p.mrk[2] != off.mrk[2])) {
# parent A/C
parent_probability[m] <- probability_table[[m]][4]
} else if ((p.mrk[1] != off.mrk[1] | p.mrk[2] != off.mrk[1]) & (p.mrk[1] == off.mrk[2] | p.mrk[2] == off.mrk[2])) {
# parent B/C
parent_probability[m] <- probability_table[[m]][5]
} else {
# parent C/C
parent_probability[m] <- probability_table[[m]][6]
}
}
}
}
# Calculte the average probability for the parent
# Write the result
output[i, 3] <- sum(parent_probability, na.rm = T)
i <- i + 1
}
output <- output[order(output$mismatch),]
sire_toKeep <- output[which(output$sex == 'M'), ]
s.keep <- sire_toKeep[which(sire_toKeep$mismatch == min(output$mismatch) | sire_toKeep$mismatch == (min(output$mismatch) + 1)),]
if (nrow(s.keep) < parent_toKeep) {
s.keep <- rbind(s.keep, sire_toKeep[c(nrow(s.keep):parent_toKeep),1])
} else {
s.keep <- s.keep
}
sire_toKeep <- s.keep$parent
dam_toKeep <- output[which(output$sex == 'F'), ]
d.keep <- dam_toKeep[which(dam_toKeep$mismatch == min(output$mismatch) | dam_toKeep$mismatch == (min(output$mismatch) + 1)),]
if (nrow(d.keep) < parent_toKeep) {
d.keep <- rbind(d.keep, dam_toKeep[c(nrow(d.keep):parent_toKeep),1])
} else {
d.keep <- d.keep
}
dam_toKeep <- d.keep$parent
parent_toKeep <- 5
i <- 1
output <- data.frame(parent = rownames(parent.genotype),
sex = parent.sex,
mismatch = NA)
output$parent <- as.character(output$parent)
# Create the probability tables
off.geno <- strsplit(off.genotype, split = '/')
probability_table <- vector('list', length(off.genotype))
for (m in c(1:length(off.genotype))) {
# If the offspring is homozygous
if (off.geno[[m]][1] == off.geno[[m]][2]) {
probability_table[[m]] <- c(0, 0, 1, NA)
} else {
probability_table[[m]] <- c(0, 0, 0, 0, 0, 1, NA)
}
}
for (p in output$parent) {
p.geno <- parent.genotype[which(rownames(parent.genotype) %in% p),]
p.geno <- strsplit(p.geno, split = '/')
# Probability
parent_probability <- rep(NA, length(p.geno))
# Loop over all the markers
for (m in c(1:length(off.genotype))) {
off.mrk <- off.geno[[m]]
p.mrk <- p.geno[[m]]
if (off.mrk[1] == off.mrk[2] & off.mrk[1] == 'NA') { # If offspring is NA/NA
parent_probability[m] <- 1
} else if (off.mrk[1] == off.mrk[2] & off.mrk[1] != 'NA') { # If offspring is homozygous
# Check parent genotype
if (p.mrk[1] == p.mrk[2] & p.mrk[1] == 'NA') { # parent NA/NA
parent_probability[m] <- probability_table[[m]][4]
} else if (p.mrk[1] == p.mrk[2] & p.mrk[1] != 'NA') {
if (p.mrk[1] == off.mrk[1]) { # parent A/A
parent_probability[m] <- probability_table[[m]][1]
} else { # parent C/C
parent_probability[m] <- probability_table[[m]][3]
}
} else { # parent heterozygous
if ((p.mrk[1] != off.mrk[1] & p.mrk[2] != off.mrk[1]) & (p.mrk[1] != off.mrk[2] & p.mrk[2] != off.mrk[2])) {
parent_probability[m] <- probability_table[[m]][3]
} else {
parent_probability[m] <- probability_table[[m]][2]
}
}
} else { # If offspring is heterozygous
if (p.mrk[1] == p.mrk[2]) { # parent homzygous
if (p.mrk[1] == 'NA') { # parent NA/NA
parent_probability[m] <- probability_table[[m]][7]
} else if (p.mrk[1] == off.mrk[1]) { # parent A/A
parent_probability[m] <- probability_table[[m]][1]
} else if (p.mrk[1] == off.mrk[2]) { # parent B/B
parent_probability[m] <- probability_table[[m]][3]
} else { # parent C/C
parent_probability[m] <- probability_table[[m]][6]
}
} else { # parent heterozygous
if ((p.mrk[1] == off.mrk[1] | p.mrk[2] == off.mrk[1]) & (p.mrk[1] == off.mrk[2] | p.mrk[2] == off.mrk[2])) {
# parent A/B
parent_probability[m] <- probability_table[[m]][2]
} else if ((p.mrk[1] == off.mrk[1] | p.mrk[2] == off.mrk[1]) & (p.mrk[1] != off.mrk[2] | p.mrk[2] != off.mrk[2])) {
# parent A/C
parent_probability[m] <- probability_table[[m]][4]
} else if ((p.mrk[1] != off.mrk[1] | p.mrk[2] != off.mrk[1]) & (p.mrk[1] == off.mrk[2] | p.mrk[2] == off.mrk[2])) {
# parent B/C
parent_probability[m] <- probability_table[[m]][5]
} else {
# parent C/C
parent_probability[m] <- probability_table[[m]][6]
}
}
}
}
# Calculte the average probability for the parent
# Write the result
output[i, 3] <- sum(parent_probability, na.rm = T)
i <- i + 1
}
output <- output[order(output$mismatch),]
View(output)
sire_toKeep <- output[which(output$sex == 'M'), ]
s.keep <- sire_toKeep[which(sire_toKeep$mismatch == min(output$mismatch) | sire_toKeep$mismatch == (min(output$mismatch) + 1)),]
nrow(s.keep)
rbind(s.keep, sire_toKeep[c(nrow(s.keep):parent_toKeep),1])
s.keep
rbind(s.keep, sire_toKeep[c((nrow(s.keep) + 1):parent_toKeep),1])
nrow(s.keep)
c((nrow(s.keep) + 1):parent_toKeep)
library(APIS)
setwd("D:/Data_RG/Package_Assignation_nouveau/Package_Assignation_nouveau/Data/microsat_0p")
off.ped   <- as.matrix(read.table('off_0p.txt'))
dam.ped   <- as.matrix(read.table('dam_0p.txt'))
sire.ped  <- as.matrix(read.table('sir_0p.txt'))
offspring <- off.tot
sire <- sire.genotype
dam <- dam.genotype
off.genotype <- off.ped[34,]
result <- APIS(off.genotype = off.ped,
sire.genotype = sire.ped,
dam.genotype = dam.ped,
error = 0.05)
setwd("D:/Data_RG/Package_Assignation_nouveau/Package_Assignation_nouveau/Data/0p_P99/R/")
off.ped <- as.matrix(read.table('off_99_0p_R.txt', header = T))
dam.ped <- as.matrix(read.table('dam_99_0p_R.txt', header = T))
sir.ped <- as.matrix(read.table('sir_99_0p_R.txt', header = T))
result <- APIS(off.genotype = off.ped,
sire.genotype = sir.ped,
dam.genotype = dam.ped,
error = 0.05)
setwd("D:/Data_RG/Migado")
off.tot  <- as.matrix(read.table("off.txt", row.names = 1))
sire.genotype <- as.matrix(read.table("sire.txt", row.names = 1))
dam.genotype  <- as.matrix(read.table("dam.txt", row.names = 1))
result <- APIS(off.genotype = off.tot,
sire.genotype = sire.genotype,
dam.genotype = dam.genotype,
error = 0.05)
library(APIS)
setwd("D:/Data_RG/Migado")
off.tot  <- as.matrix(read.table("off.txt", row.names = 1))
sire.genotype <- as.matrix(read.table("sire.txt", row.names = 1))
dam.genotype  <- as.matrix(read.table("dam.txt", row.names = 1))
result <- APIS(off.genotype = off.tot,
sire.genotype = sire.genotype,
dam.genotype = dam.genotype,
error = 0.05)
library(APIS)
setwd("D:/Data_RG/Migado")
off.tot  <- as.matrix(read.table("off.txt", row.names = 1))
sire.genotype <- as.matrix(read.table("sire.txt", row.names = 1))
dam.genotype  <- as.matrix(read.table("dam.txt", row.names = 1))
result <- APIS(off.genotype = off.tot,
sire.genotype = sire.genotype,
dam.genotype = dam.genotype,
error = 0.05)
library(APIS)
setwd("D:/Data_RG/Migado")
off.tot  <- as.matrix(read.table("off.txt", row.names = 1))
sire.genotype <- as.matrix(read.table("sire.txt", row.names = 1))
dam.genotype  <- as.matrix(read.table("dam.txt", row.names = 1))
result <- APIS(off.genotype = off.tot,
sire.genotype = sire.genotype,
dam.genotype = dam.genotype,
error = 0.05)
library(APIS)
setwd("D:/Data_RG/Migado")
off.tot  <- as.matrix(read.table("off.txt", row.names = 1))
sire.genotype <- as.matrix(read.table("sire.txt", row.names = 1))
dam.genotype  <- as.matrix(read.table("dam.txt", row.names = 1))
result <- APIS(off.genotype = off.tot,
sire.genotype = sire.genotype,
dam.genotype = dam.genotype,
error = 0.05)
library(APIS)
setwd("D:/Data_RG/Package_Assignation_nouveau/Package_Assignation_nouveau/Data/microsat_0p")
off.ped   <- as.matrix(read.table('off_0p.txt'))
dam.ped   <- as.matrix(read.table('dam_0p.txt'))
sire.ped  <- as.matrix(read.table('sir_0p.txt'))
result <- APIS(off.genotype = off.ped,
sire.genotype = sire.ped,
dam.genotype = dam.ped,
error = 0.05)
log.select <- result$log
library(APIS)
setwd("D:/Data_RG/Package_Assignation_nouveau/Package_Assignation_nouveau/Data/microsat_0p")
off.ped   <- as.matrix(read.table('off_0p.txt'))
dam.ped   <- as.matrix(read.table('dam_0p.txt'))
sire.ped  <- as.matrix(read.table('sir_0p.txt'))
result <- APIS(off.genotype = off.ped,
sire.genotype = sire.ped,
dam.genotype = dam.ped,
error = 0.05)
log.full <- result$log
library(APIS)
off.ped   <- as.matrix(read.table('off_0p.txt'))
dam.ped   <- as.matrix(read.table('dam_0p.txt'))
sire.ped  <- as.matrix(read.table('sir_0p.txt'))
result <- APIS(off.genotype = off.ped,
sire.genotype = sire.ped,
dam.genotype = dam.ped,
error = 0.05)
log.full <- result$log
hist(log.full$mendel1, col = 'green')
hist(log.select$mendel1, col = 'red', add = T)
hist(log.full$mendel2, col = 'green')
hist(log.select$mendel2, col = 'red', add = T)
