sire.genotype <- as.matrix(read.table("sire.txt", row.names = 1))
dam.genotype  <- as.matrix(read.table("dam.txt", row.names = 1))
result <- APIS(off.genotype = off.tot,
sire.genotype = sire.genotype,
dam.genotype = dam.genotype,
error = 0.05)
library(APIS)
setwd("D:/Data_RG/Migado")
off.tot  <- as.matrix(read.table("off.txt", row.names = 1))
sire.genotype <- as.matrix(read.table("sire.txt", row.names = 1))
dam.genotype  <- as.matrix(read.table("dam.txt", row.names = 1))
result <- APIS(off.genotype = off.tot,
sire.genotype = sire.genotype,
dam.genotype = dam.genotype,
error = 0.05)
library(APIS)
setwd("D:/Data_RG/Migado")
off.tot  <- as.matrix(read.table("off.txt", row.names = 1))
sire.genotype <- as.matrix(read.table("sire.txt", row.names = 1))
dam.genotype  <- as.matrix(read.table("dam.txt", row.names = 1))
result <- APIS(off.genotype = off.tot,
sire.genotype = sire.genotype,
dam.genotype = dam.genotype,
error = 0.05)
library(APIS)
setwd("D:/Data_RG/Package_Assignation_nouveau/Package_Assignation_nouveau/Data/microsat_0p")
off.ped   <- as.matrix(read.table('off_0p.txt'))
dam.ped   <- as.matrix(read.table('dam_0p.txt'))
sire.ped  <- as.matrix(read.table('sir_0p.txt'))
result <- APIS(off.genotype = off.ped,
sire.genotype = sire.ped,
dam.genotype = dam.ped,
error = 0.05)
log.select <- result$log
library(APIS)
setwd("D:/Data_RG/Package_Assignation_nouveau/Package_Assignation_nouveau/Data/microsat_0p")
off.ped   <- as.matrix(read.table('off_0p.txt'))
dam.ped   <- as.matrix(read.table('dam_0p.txt'))
sire.ped  <- as.matrix(read.table('sir_0p.txt'))
result <- APIS(off.genotype = off.ped,
sire.genotype = sire.ped,
dam.genotype = dam.ped,
error = 0.05)
log.full <- result$log
library(APIS)
off.ped   <- as.matrix(read.table('off_0p.txt'))
dam.ped   <- as.matrix(read.table('dam_0p.txt'))
sire.ped  <- as.matrix(read.table('sir_0p.txt'))
result <- APIS(off.genotype = off.ped,
sire.genotype = sire.ped,
dam.genotype = dam.ped,
error = 0.05)
log.full <- result$log
hist(log.full$mendel1, col = 'green')
hist(log.select$mendel1, col = 'red', add = T)
hist(log.full$mendel2, col = 'green')
hist(log.select$mendel2, col = 'red', add = T)
install.packages("sequoia")
library(sequoia)
setwd("C:/Users/rgriot/Desktop")
ped <- read.table('ped_sequoia.txt')
View(ped)
colnames(ped) <- c('ID', 'dam', 'sire')
geno <- SimGeno(Ped = ped, nSnp = 90, ParMis = 0.1, nGen = 2)
View(geno)
table(geno)
geno[which(geno==0)] <- 'A/A'
geno[which(geno==1)] <- 'A/B'
geno[which(geno==2)] <- 'B/B'
geno[which(geno==-9)] <- 'NA/NA'
table(geno)
sire.geno <- geno[which(rownames(geno) %in% c(151:300)),]
dam.geno <- geno[which(rownames(geno) %in% c(1:150)),]
off.geno <- geno[which(rownames(geno) %in% c(301:1000)),]
library(APIS)
library(APIS)
result <- APIS(off.genotype = off.geno,
sire.genotype = sire.geno,
dam.genotype = dam.geno,
error = 0.05)
library(APIS)
result.full <- APIS(off.genotype = off.geno,
sire.genotype = sire.geno,
dam.genotype = dam.geno,
error = 0.05)
result.ped <- result$pedigree
colnames(result.ped) <- c('ID', 'dam', 'sire')
comp.ped <- PedCompare(Ped1 = ped, Ped2 = result.ped)
result.ped
comp.ped$Counts
comp.ped$MergedPed
tmp <- comp.ped$MergedPed
View(tmp)
result.ped <- result.ped[,c(1,3,2)]
View(result.ped)
result.ped <- result$pedigree
View(result.ped)
result.ped <- result.ped[,c(1,3,2)]
View(result.ped)
colnames(result.ped) <- c('ID', 'dam', 'sire')
colnames(result.ped) <- c('ID', 'dam', 'sire')
comp.ped <- PedCompare(Ped1 = ped, Ped2 = result.ped)
tmp <- comp.ped$MergedPed
View(tmp)
comp.ped$Counts
library(APIS)
result.full <- APIS(off.genotype = off.geno,
sire.genotype = sire.geno,
dam.genotype = dam.geno,
error = 0.05)
library(APIS)
result.full <- APIS(off.genotype = off.geno,
sire.genotype = sire.geno,
dam.genotype = dam.geno,
error = 0.05)
result.ped2 <- result.full$pedigree
result.ped2 <- result.ped2[,c(1,3,2)]
colnames(result.ped2) <- c('ID', 'dam', 'sire')
# comp.ped <- PedCompare(Ped1 = ped, Ped2 = result.ped)
# tmp <- comp.ped$MergedPed
# comp.ped$Counts
comp.ped2 <- PedCompare(Ped1 = result.ped, Ped2 = result.ped2)
comp.ped$Counts
View(result.ped2)
comp.ped2 <- PedCompare(Ped1 = result.ped, Ped2 = result.ped2)
comp.ped$Counts
comp.ped2$Counts
comp.ped2 <- PedCompare(Ped1 = ped, Ped2 = result.ped2)
comp.ped2$Counts
comp.ped <- PedCompare(Ped1 = ped, Ped2 = result.ped)
comp.ped$Counts
comp.ped2 <- PedCompare(Ped1 = ped, Ped2 = result.ped2)
comp.ped2$Counts
log <- result.full$log
View(log)
log <- result$log
log <- result$log
log2 <- result.full$log
log[which(log$sire1 == log2$sire1 & log$dam1 == log2$dam1),1]
log[which((log$sire1 == log2$sire1 & log$dam1 == log2$dam1) &
(log$sire1 != log2$sire1 | log$dam1 != log2$dam1)),1]
log[which((log$sire1 == log2$sire1 & log$dam1 == log2$dam1) &
(log$sire1 != log2$sire1 || log$dam1 != log2$dam1)),1]
log[which((log$sire1 == log2$sire1 & log$dam1 == log2$dam1) &
(log$sire2 != log2$sire2 | log$dam2 != log2$dam2),1]
log[which((log$sire1 == log2$sire1 & log$dam1 == log2$dam1) &
(log$sire2 != log2$sire2 | log$dam2 != log2$dam2)),1]
log[which(log$off == "1000"),]
log[which(log$off == "1000"),]
log2[which(log2$off == "1000"),]
off.genotype <- off.geno[which(rownames(off.geno) == "1000"),]
parent.genotype <- rbind(sire.geno, dam.geno)
parent.sex <- c(rep("M", nrow(sire.geno)), rep("F", nrow(dam.geno)))
selectParents <- function(off.genotype, parent.genotype, parent.sex) {
# Initialize the variables
parent_toKeep <- 5
i <- 1
output <- data.frame(parent = rownames(parent.genotype),
sex = parent.sex,
mismatch = NA)
output$parent <- as.character(output$parent)
# Create the probability tables
off.geno <- strsplit(off.genotype, split = '/')
probability_table <- vector('list', length(off.genotype))
for (m in c(1:length(off.genotype))) {
# If the offspring is homozygous
if (off.geno[[m]][1] == off.geno[[m]][2]) {
probability_table[[m]] <- c(0, 0, 1, NA)
} else {
probability_table[[m]] <- c(0, 0, 0, 0, 0, 1, NA)
}
}
# Loop over all the parents
for (p in output$parent) {
p.geno <- parent.genotype[which(rownames(parent.genotype) %in% p),]
p.geno <- strsplit(p.geno, split = '/')
# Probability
parent_probability <- rep(NA, length(p.geno))
# Loop over all the markers
for (m in c(1:length(off.genotype))) {
off.mrk <- off.geno[[m]]
p.mrk <- p.geno[[m]]
if (off.mrk[1] == off.mrk[2] & off.mrk[1] == 'NA') { # If offspring is NA/NA
parent_probability[m] <- 1
} else if (off.mrk[1] == off.mrk[2] & off.mrk[1] != 'NA') { # If offspring is homozygous
# Check parent genotype
if (p.mrk[1] == p.mrk[2] & p.mrk[1] == 'NA') { # parent NA/NA
parent_probability[m] <- probability_table[[m]][4]
} else if (p.mrk[1] == p.mrk[2] & p.mrk[1] != 'NA') {
if (p.mrk[1] == off.mrk[1]) { # parent A/A
parent_probability[m] <- probability_table[[m]][1]
} else { # parent C/C
parent_probability[m] <- probability_table[[m]][3]
}
} else { # parent heterozygous
if ((p.mrk[1] != off.mrk[1] & p.mrk[2] != off.mrk[1]) & (p.mrk[1] != off.mrk[2] & p.mrk[2] != off.mrk[2])) {
parent_probability[m] <- probability_table[[m]][3]
} else {
parent_probability[m] <- probability_table[[m]][2]
}
}
} else { # If offspring is heterozygous
if (p.mrk[1] == p.mrk[2]) { # parent homzygous
if (p.mrk[1] == 'NA') { # parent NA/NA
parent_probability[m] <- probability_table[[m]][7]
} else if (p.mrk[1] == off.mrk[1]) { # parent A/A
parent_probability[m] <- probability_table[[m]][1]
} else if (p.mrk[1] == off.mrk[2]) { # parent B/B
parent_probability[m] <- probability_table[[m]][3]
} else { # parent C/C
parent_probability[m] <- probability_table[[m]][6]
}
} else { # parent heterozygous
if ((p.mrk[1] == off.mrk[1] | p.mrk[2] == off.mrk[1]) & (p.mrk[1] == off.mrk[2] | p.mrk[2] == off.mrk[2])) {
# parent A/B
parent_probability[m] <- probability_table[[m]][2]
} else if ((p.mrk[1] == off.mrk[1] | p.mrk[2] == off.mrk[1]) & (p.mrk[1] != off.mrk[2] | p.mrk[2] != off.mrk[2])) {
# parent A/C
parent_probability[m] <- probability_table[[m]][4]
} else if ((p.mrk[1] != off.mrk[1] | p.mrk[2] != off.mrk[1]) & (p.mrk[1] == off.mrk[2] | p.mrk[2] == off.mrk[2])) {
# parent B/C
parent_probability[m] <- probability_table[[m]][5]
} else {
# parent C/C
parent_probability[m] <- probability_table[[m]][6]
}
}
}
}
# Calculte the average probability for the parent
# Write the result
output[i, 3] <- sum(parent_probability, na.rm = T)
i <- i + 1
}
output <- output[order(output$mismatch),]
sire_toKeep <- output[which(output$sex == 'M'), ]
s.keep <- sire_toKeep[which(sire_toKeep$mismatch >= min(output$mismatch) &  sire_toKeep$mismatch <= (min(output$mismatch) + 2)),]
select.sire <- ifelse(test = parent_toKeep > nrow(sire_toKeep), yes = nrow(sire_toKeep), no = parent_toKeep)
if (nrow(s.keep) < parent_toKeep) {
s.keep <- rbind(s.keep, sire_toKeep[c((nrow(s.keep) + 1):select.sire),])
} else {
s.keep <- s.keep
}
sire_toKeep <- s.keep$parent
dam_toKeep <- output[which(output$sex == 'F'), ]
d.keep <- dam_toKeep[which(dam_toKeep$mismatch >= min(output$mismatch) & dam_toKeep$mismatch <= (min(output$mismatch) + 2)),]
select.dam <- ifelse(test = parent_toKeep > nrow(dam_toKeep), yes = nrow(dam_toKeep), no = parent_toKeep)
if (nrow(d.keep) < parent_toKeep) {
d.keep <- rbind(d.keep, dam_toKeep[c((nrow(d.keep) + 1):select.dam),])
} else {
d.keep <- d.keep
}
dam_toKeep <- d.keep$parent
# Return the most likely parents
return(list(sire_toKeep = sire_toKeep, dam_toKeep = dam_toKeep))
}
# Initialize the variables
parent_toKeep <- 5
i <- 1
output <- data.frame(parent = rownames(parent.genotype),
sex = parent.sex,
mismatch = NA)
output$parent <- as.character(output$parent)
# Create the probability tables
off.geno <- strsplit(off.genotype, split = '/')
probability_table <- vector('list', length(off.genotype))
for (m in c(1:length(off.genotype))) {
# If the offspring is homozygous
if (off.geno[[m]][1] == off.geno[[m]][2]) {
probability_table[[m]] <- c(0, 0, 1, NA)
} else {
probability_table[[m]] <- c(0, 0, 0, 0, 0, 1, NA)
}
}
for (p in output$parent) {
p.geno <- parent.genotype[which(rownames(parent.genotype) %in% p),]
p.geno <- strsplit(p.geno, split = '/')
# Probability
parent_probability <- rep(NA, length(p.geno))
# Loop over all the markers
for (m in c(1:length(off.genotype))) {
off.mrk <- off.geno[[m]]
p.mrk <- p.geno[[m]]
if (off.mrk[1] == off.mrk[2] & off.mrk[1] == 'NA') { # If offspring is NA/NA
parent_probability[m] <- 1
} else if (off.mrk[1] == off.mrk[2] & off.mrk[1] != 'NA') { # If offspring is homozygous
# Check parent genotype
if (p.mrk[1] == p.mrk[2] & p.mrk[1] == 'NA') { # parent NA/NA
parent_probability[m] <- probability_table[[m]][4]
} else if (p.mrk[1] == p.mrk[2] & p.mrk[1] != 'NA') {
if (p.mrk[1] == off.mrk[1]) { # parent A/A
parent_probability[m] <- probability_table[[m]][1]
} else { # parent C/C
parent_probability[m] <- probability_table[[m]][3]
}
} else { # parent heterozygous
if ((p.mrk[1] != off.mrk[1] & p.mrk[2] != off.mrk[1]) & (p.mrk[1] != off.mrk[2] & p.mrk[2] != off.mrk[2])) {
parent_probability[m] <- probability_table[[m]][3]
} else {
parent_probability[m] <- probability_table[[m]][2]
}
}
} else { # If offspring is heterozygous
if (p.mrk[1] == p.mrk[2]) { # parent homzygous
if (p.mrk[1] == 'NA') { # parent NA/NA
parent_probability[m] <- probability_table[[m]][7]
} else if (p.mrk[1] == off.mrk[1]) { # parent A/A
parent_probability[m] <- probability_table[[m]][1]
} else if (p.mrk[1] == off.mrk[2]) { # parent B/B
parent_probability[m] <- probability_table[[m]][3]
} else { # parent C/C
parent_probability[m] <- probability_table[[m]][6]
}
} else { # parent heterozygous
if ((p.mrk[1] == off.mrk[1] | p.mrk[2] == off.mrk[1]) & (p.mrk[1] == off.mrk[2] | p.mrk[2] == off.mrk[2])) {
# parent A/B
parent_probability[m] <- probability_table[[m]][2]
} else if ((p.mrk[1] == off.mrk[1] | p.mrk[2] == off.mrk[1]) & (p.mrk[1] != off.mrk[2] | p.mrk[2] != off.mrk[2])) {
# parent A/C
parent_probability[m] <- probability_table[[m]][4]
} else if ((p.mrk[1] != off.mrk[1] | p.mrk[2] != off.mrk[1]) & (p.mrk[1] == off.mrk[2] | p.mrk[2] == off.mrk[2])) {
# parent B/C
parent_probability[m] <- probability_table[[m]][5]
} else {
# parent C/C
parent_probability[m] <- probability_table[[m]][6]
}
}
}
}
# Calculte the average probability for the parent
# Write the result
output[i, 3] <- sum(parent_probability, na.rm = T)
i <- i + 1
}
View(output)
log[which(log$off == "1000"),]
log2[which(log2$off == "1000"),]
tmp <- rbind(sire.geno[which(rownames(sire.geno) == "192"),], sire.geno[which(rownames(sire.geno) == "226"),], sire.geno[which(rownames(sire.geno) == "173"),])
tmp <- rbind(sire.geno[which(rownames(sire.geno) == "192"),], sire.geno[which(rownames(sire.geno) == "226"),], sire.geno[which(rownames(sire.geno) == "173"),], sire.geno[which(rownames(sire.geno) == "281"),], sire.geno[which(rownames(sire.geno) == "290"),])
View(tmp)
table(tmp[5,])
table(tmp[4,])
table(tmp[3,])
table(tmp[2,])
table(tmp[1,])
l.homo <- apply(parent.genotype, 1, function(X) {length(X[X[1] == X[2]])})
l.homo
l.homo <- apply(parent.genotype, 1, function(X) {length(X[which(X[1] == X[2])])})
l.homo
function(X) {
X.tmp <- strsplit(X, '/')
return(length(X[which(X.tmp[1] == X.tmp[2])]))
}
countHomo <- function(X) {
X.tmp <- strsplit(X, '/')
return(length(X[which(X.tmp[1] == X.tmp[2])]))
}
l.homo <- apply(parent.genotype, 1, countHomo)
countHomo <- function(X) {
X.tmp <- strsplit(X, '/')
return(length(X[which(X.tmp[[1]] == X.tmp[[2]])]))
}
l.homo <- apply(parent.genotype, 1, countHomo)
l.homo
l.homo <- apply(parent.genotype, 1, table)
l.homo <- as.numeric(apply(parent.genotype, 1, function(X) {length(X[X=='A/A'|X=='B/B'])}))
l.homo
output$mismatch / l.homo
output$mismatch <- output$mismatch / l.homo
View(output)
hist(output$mismatch)
hist(output$mismatch, breaks = 20)
# Initialize the variables
parent_toKeep <- 5
i <- 1
output <- data.frame(parent = rownames(parent.genotype),
sex = parent.sex,
mismatch = NA)
output$parent <- as.character(output$parent)
# Create the probability tables
off.geno <- strsplit(off.genotype, split = '/')
probability_table <- vector('list', length(off.genotype))
for (m in c(1:length(off.genotype))) {
# If the offspring is homozygous
if (off.geno[[m]][1] == off.geno[[m]][2]) {
probability_table[[m]] <- c(0, 0, 1, NA)
} else {
probability_table[[m]] <- c(0, 0, 0, 0, 0, 1, NA)
}
}
# Loop over all the parents
for (p in output$parent) {
p.geno <- parent.genotype[which(rownames(parent.genotype) %in% p),]
p.geno <- strsplit(p.geno, split = '/')
# Probability
parent_probability <- rep(NA, length(p.geno))
# Loop over all the markers
for (m in c(1:length(off.genotype))) {
off.mrk <- off.geno[[m]]
p.mrk <- p.geno[[m]]
if (off.mrk[1] == off.mrk[2] & off.mrk[1] == 'NA') { # If offspring is NA/NA
parent_probability[m] <- 1
} else if (off.mrk[1] == off.mrk[2] & off.mrk[1] != 'NA') { # If offspring is homozygous
# Check parent genotype
if (p.mrk[1] == p.mrk[2] & p.mrk[1] == 'NA') { # parent NA/NA
parent_probability[m] <- probability_table[[m]][4]
} else if (p.mrk[1] == p.mrk[2] & p.mrk[1] != 'NA') {
if (p.mrk[1] == off.mrk[1]) { # parent A/A
parent_probability[m] <- probability_table[[m]][1]
} else { # parent C/C
parent_probability[m] <- probability_table[[m]][3]
}
} else { # parent heterozygous
if ((p.mrk[1] != off.mrk[1] & p.mrk[2] != off.mrk[1]) & (p.mrk[1] != off.mrk[2] & p.mrk[2] != off.mrk[2])) {
parent_probability[m] <- probability_table[[m]][3]
} else {
parent_probability[m] <- probability_table[[m]][2]
}
}
} else { # If offspring is heterozygous
if (p.mrk[1] == p.mrk[2]) { # parent homzygous
if (p.mrk[1] == 'NA') { # parent NA/NA
parent_probability[m] <- probability_table[[m]][7]
} else if (p.mrk[1] == off.mrk[1]) { # parent A/A
parent_probability[m] <- probability_table[[m]][1]
} else if (p.mrk[1] == off.mrk[2]) { # parent B/B
parent_probability[m] <- probability_table[[m]][3]
} else { # parent C/C
parent_probability[m] <- probability_table[[m]][6]
}
} else { # parent heterozygous
if ((p.mrk[1] == off.mrk[1] | p.mrk[2] == off.mrk[1]) & (p.mrk[1] == off.mrk[2] | p.mrk[2] == off.mrk[2])) {
# parent A/B
parent_probability[m] <- probability_table[[m]][2]
} else if ((p.mrk[1] == off.mrk[1] | p.mrk[2] == off.mrk[1]) & (p.mrk[1] != off.mrk[2] | p.mrk[2] != off.mrk[2])) {
# parent A/C
parent_probability[m] <- probability_table[[m]][4]
} else if ((p.mrk[1] != off.mrk[1] | p.mrk[2] != off.mrk[1]) & (p.mrk[1] == off.mrk[2] | p.mrk[2] == off.mrk[2])) {
# parent B/C
parent_probability[m] <- probability_table[[m]][5]
} else {
# parent C/C
parent_probability[m] <- probability_table[[m]][6]
}
}
}
}
# Calculte the average probability for the parent
# Write the result
output[i, 3] <- sum(parent_probability, na.rm = T)
i <- i + 1
}
View(output)
library(APIS)
result <- APIS(off.genotype = off.geno,
sire.genotype = sire.geno,
dam.genotype = dam.geno,
error = 0.05)
sire.geno <- geno[which(rownames(geno) %in% c(151:300)),]
dam.geno <- geno[which(rownames(geno) %in% c(1:150)),]
off.geno <- geno[which(rownames(geno) %in% c(301:1000)),]
result <- APIS(off.genotype = off.geno,
sire.genotype = sire.geno,
dam.genotype = dam.geno,
error = 0.05)
library(APIS)
result <- APIS(off.genotype = off.geno,
sire.genotype = sire.geno,
dam.genotype = dam.geno,
error = 0.05)
library(APIS)
sire.geno <- geno[which(rownames(geno) %in% c(151:300)),]
dam.geno <- geno[which(rownames(geno) %in% c(1:150)),]
off.geno <- geno[which(rownames(geno) %in% c(301:1000)),]
result <- APIS(off.genotype = off.geno,
sire.genotype = sire.geno,
dam.genotype = dam.geno,
error = 0.05)
result <- APIS(off.genotype = off.geno,
sire.genotype = sire.geno,
dam.genotype = dam.geno,
error = 0.05,
preselect.Parent = 5)
library(APIS)
result <- APIS(off.genotype = off.geno,
sire.genotype = sire.geno,
dam.genotype = dam.geno,
error = 0.05,
preselect.Parent = 5)
library(APIS)
result <- APIS(off.genotype = off.geno,
sire.genotype = sire.geno,
dam.genotype = dam.geno,
error = 0.05,
preselect.Parent = 5)
result <- APIS(off.genotype = off.geno,
sire.genotype = sire.geno,
dam.genotype = dam.geno,
error = 0.05,
preselect.Parent = c(5,10))
result <- APIS(off.genotype = off.geno,
sire.genotype = sire.geno,
dam.genotype = dam.geno,
error = 0.05,
preselect.Parent = F)
setwd("D:/Data_RG/package_APIS/APIS")
library(APIS)
knit_with_parameters('D:/Data_RG/package_APIS/APIS/vignettes/apis_vignette.Rmd', encoding = 'UTF-8')
install.packages("float")
library(float)
library(APIS)
