mom <- dam[which(rownames(dam)==couple[j,2]),]
score_couple <- vector('numeric', length = length(marker))
cpt <- 1
for (mrk in marker) {
child_geno <- child[(mrk:(mrk+1))]
dad_geno <- dad[(mrk:(mrk+1))]
mom_geno <- mom[(mrk:(mrk+1))]
#Si l'individu est HETEROZYGOTE au locus
if (sum(child_geno)==1) {
code_dad <- ifelse(test = sum(dad_geno)==0, yes = 'homo0', no = ifelse(test = sum(dad_geno)==1, yes = 'hetero', no = 'homo1'))
code_mom <- ifelse(test = sum(mom_geno)==0, yes = 'homo0', no = ifelse(test = sum(mom_geno)==1, yes = 'hetero', no = 'homo1'))
score_couple[cpt] <- hetero_table[which(rownames(hetero_table)==code_dad), which(colnames(hetero_table)==code_mom)]
} else if (sum(child_geno)==0) {
code_dad <- ifelse(test = sum(dad_geno)==0, yes = 'homo0', no = ifelse(test = sum(dad_geno)==1, yes = 'hetero', no = 'homo1'))
code_mom <- ifelse(test = sum(mom_geno)==0, yes = 'homo0', no = ifelse(test = sum(mom_geno)==1, yes = 'hetero', no = 'homo1'))
score_couple[cpt] <- homo0_table[which(rownames(homo0_table)==code_dad), which(colnames(homo0_table)==code_mom)]
} else {
code_dad <- ifelse(test = sum(dad_geno)==0, yes = 'homo0', no = ifelse(test = sum(dad_geno)==1, yes = 'hetero', no = 'homo1'))
code_mom <- ifelse(test = sum(mom_geno)==0, yes = 'homo0', no = ifelse(test = sum(mom_geno)==1, yes = 'hetero', no = 'homo1'))
score_couple[cpt] <- homo1_table[which(rownames(homo1_table)==code_dad), which(colnames(homo1_table)==code_mom)]
}
cpt <- cpt+1
}
res_couple[j,3] <- sum(score_couple)
}
View(res_couple)
tmp <- res_couple[order(res_couple[,3], decreasing = T),]
View(tmp)
for (i in 1:nrow(offspring)) {
child <- offspring[i,]
res_couple <- cbind(couple, NA)
for (j in 1:nrow(couple)) {
dad <- sir[which(rownames(sir)==couple[j,1]),]
mom <- dam[which(rownames(dam)==couple[j,2]),]
score_couple <- vector('numeric', length = length(marker))
cpt <- 1
for (mrk in marker) {
child_geno <- child[(mrk:(mrk+1))]
dad_geno <- dad[(mrk:(mrk+1))]
mom_geno <- mom[(mrk:(mrk+1))]
#Si l'individu est HETEROZYGOTE au locus
if (sum(child_geno)==1) {
code_dad <- ifelse(test = sum(dad_geno)==0, yes = 'homo0', no = ifelse(test = sum(dad_geno)==1, yes = 'hetero', no = 'homo1'))
code_mom <- ifelse(test = sum(mom_geno)==0, yes = 'homo0', no = ifelse(test = sum(mom_geno)==1, yes = 'hetero', no = 'homo1'))
score_couple[cpt] <- hetero_table[which(rownames(hetero_table)==code_dad), which(colnames(hetero_table)==code_mom)]
} else if (sum(child_geno)==0) {
code_dad <- ifelse(test = sum(dad_geno)==0, yes = 'homo0', no = ifelse(test = sum(dad_geno)==1, yes = 'hetero', no = 'homo1'))
code_mom <- ifelse(test = sum(mom_geno)==0, yes = 'homo0', no = ifelse(test = sum(mom_geno)==1, yes = 'hetero', no = 'homo1'))
score_couple[cpt] <- homo0_table[which(rownames(homo0_table)==code_dad), which(colnames(homo0_table)==code_mom)]
} else {
code_dad <- ifelse(test = sum(dad_geno)==0, yes = 'homo0', no = ifelse(test = sum(dad_geno)==1, yes = 'hetero', no = 'homo1'))
code_mom <- ifelse(test = sum(mom_geno)==0, yes = 'homo0', no = ifelse(test = sum(mom_geno)==1, yes = 'hetero', no = 'homo1'))
score_couple[cpt] <- homo1_table[which(rownames(homo1_table)==code_dad), which(colnames(homo1_table)==code_mom)]
}
cpt <- cpt+1
}
res_couple[j,3] <- sum(score_couple)
}
tmp <- res_couple[order(res_couple[,3], decreasing = T),]
res[i,(2:3)] <- c(tmp[1,1], tmp[1,2])
print(i)
}
View(res)
source('marker_power.R')
rm(list=ls())
setwd("~/")
source('exclusion_power_boissard.R')
source('exclusion_power.R')
source('marker_power.R')
source('offspring_simulation.R')
source('pedigree_exclusion.R')
source('pedigree_likelihood.R')
source('MAF.R')
#Simulation des génotypes
nbmrk <- 100
sir <- matrix(NA, 10, nbmrk)
sir[] <- sample(c(0,1), size = 10*nbmrk, replace = T)
rownames(sir) <- paste0('sir_',c(1:10))
dam <- matrix(NA, 4, nbmrk)
dam[] <- sample(c(0,1), size = 4*nbmrk, replace = T)
rownames(dam) <- paste0('dam_',c(1:4))
#Puissance du jeu de marqueur a priori
Pu <- exclusion_power_boissard(sir, dam)
Pu2 <- exclusion_power(sir, dam)
rm(list=ls())
setwd("~/")
source('exclusion_power_boissard.R')
source('exclusion_power.R')
source('marker_power.R')
source('offspring_simulation.R')
source('pedigree_exclusion.R')
source('pedigree_likelihood.R')
source('MAF.R')
#Simulation des génotypes
nbmrk <- 800
sir <- matrix(NA, 10, nbmrk)
sir[] <- sample(c(0,1), size = 10*nbmrk, replace = T)
rownames(sir) <- paste0('sir_',c(1:10))
dam <- matrix(NA, 4, nbmrk)
dam[] <- sample(c(0,1), size = 4*nbmrk, replace = T)
rownames(dam) <- paste0('dam_',c(1:4))
#Puissance du jeu de marqueur a priori
Pu <- exclusion_power_boissard(sir, dam)
Pu2 <- exclusion_power(sir, dam)
1-Pu2
1-Pu
#Simulation de la descendance
offspring <- offspring_simulation(sir, dam, 2000)
#Pedigree
ped_exclusion <- pedigree_exclusion(offspring[[1]], sir, dam)
source('pedigree_likelihood.R')
rm(list=ls())
setwd("~/")
source('exclusion_power_boissard.R')
source('exclusion_power.R')
source('marker_power.R')
source('offspring_simulation.R')
source('pedigree_exclusion.R')
source('pedigree_likelihood.R')
source('MAF.R')
#Simulation des génotypes
nbmrk <- 60
sir <- matrix(NA, 10, nbmrk)
sir[] <- sample(c(0,1), size = 10*nbmrk, replace = T)
rownames(sir) <- paste0('sir_',c(1:10))
dam <- matrix(NA, 4, nbmrk)
dam[] <- sample(c(0,1), size = 4*nbmrk, replace = T)
rownames(dam) <- paste0('dam_',c(1:4))
#Puissance du jeu de marqueur a priori
Pu <- exclusion_power_boissard(sir, dam)
Pu2 <- exclusion_power(sir, dam)
#Simulation de la descendance
offspring <- offspring_simulation(sir, dam, 2000)
#Pedigree
ped_exclusion <- pedigree_exclusion(offspring[[1]], sir, dam)
ped_likihood <- pedigree_likelihood(offspring[[1]], sir, dam)
rownames(offspring[[1]]) <- paste0('off_', c(1:nrow(offspring[[1]])))
ped_likelihood <- pedigree_likelihood(offspring[[1]], sir, dam)
#Puissance d'assignation
assignation <- data.frame(sir = ped[[1]][,1], dam = ped[[2]][,1])
#Puissance d'assignation
assignation <- data.frame(sir = ped_exclusion[[1]][,1], dam = ped_exclusion[[2]][,1])
Pa_exclusion <- marker_power(assignation, offspring[[2]])
Pa_likelihood <- marker_power(ped_likelihood, offspring[[2]])
ped_likelihood
Pa_likelihood <- marker_power(ped_likelihood[,2:3], offspring[[2]])
ped_likelihood[,2:3]
offspring[[2]]
assignation_likelihood <- ped_likelihood[,2:3]
rownames(assignation_likelihood) <- ped_likelihood[,1]
Pa_likelihood <- marker_power(assignation_likelihood, offspring[[2]])
Pu <- exclusion_power_boissard(sir, dam)
Pu2 <- exclusion_power(sir, dam)
1-Pu2
1-Pu
View(ped_likelihood)
rm(list=ls())
setwd("~/")
source('exclusion_power_boissard.R')
source('exclusion_power.R')
source('marker_power.R')
source('offspring_simulation.R')
source('pedigree_exclusion.R')
source('pedigree_likelihood.R')
source('MAF.R')
#Simulation des génotypes
nbmrk <- 160
sir <- matrix(NA, 100, nbmrk)
sir[] <- sample(c(0,1), size = 100*nbmrk, replace = T)
rownames(sir) <- paste0('sir_',c(1:100))
dam <- matrix(NA, 100, nbmrk)
dam[] <- sample(c(0,1), size = 100*nbmrk, replace = T)
rownames(dam) <- paste0('dam_',c(1:100))
#Puissance du jeu de marqueur a priori
Pu <- exclusion_power_boissard(sir, dam)
Pu2 <- exclusion_power(sir, dam)
nbmrk <- 160
sir <- matrix(NA, 20, nbmrk)
sir[] <- sample(c(0,1), size = 20*nbmrk, replace = T)
rownames(sir) <- paste0('sir_',c(1:20))
dam <- matrix(NA, 10, nbmrk)
dam[] <- sample(c(0,1), size = 10*nbmrk, replace = T)
rownames(dam) <- paste0('dam_',c(1:10))
#Puissance du jeu de marqueur a priori
Pu <- exclusion_power_boissard(sir, dam)
Pu2 <- exclusion_power(sir, dam)
#Simulation de la descendance
offspring <- offspring_simulation(sir, dam, 1000)
#Pedigree
ped_exclusion <- pedigree_exclusion(offspring[[1]], sir, dam)
rownames(offspring[[1]]) <- paste0('off_', c(1:nrow(offspring[[1]])))
ped_likelihood <- pedigree_likelihood(offspring[[1]], sir, dam)
#Puissance d'assignation
assignation <- data.frame(sir = ped_exclusion[[1]][,1], dam = ped_exclusion[[2]][,1])
Pa_exclusion <- marker_power(assignation, offspring[[2]])
assignation_likelihood <- ped_likelihood[,2:3]
rownames(assignation_likelihood) <- ped_likelihood[,1]
Pa_likelihood <- marker_power(assignation_likelihood, offspring[[2]])
1-Pa_exclusion
1-Pa_likelihood
offspring <- assignation_likelihood
sir <- length(unique(offspring$sir))
offspring <- as.data.frame(offspring)
sir <- length(unique(offspring$sir))
dam <- length(unique(offspring$dam))
mating <- matrix(NA, nrow = sir, ncol = dam)
row.names(mating) <- unique(offspring$sir)
colnames(mating) <- unique(offspring$dam)
View(mating)
unique(rownames(mating))
des_sir <- split(offspring, offspring$sir)
for (i in des_sir) {
}
View(i)
length(des_sir)
for (i in 1:length(des_sir)) {
}
tmp <- des_sir[[i]]
tmp2 <- tapply(tmp, tmp$dam, length)
tmp2 <- tapply(tmp, tmp$dam, fun = length)
tmp2 <- tapply(tmp, X = tmp$dam, FUN = length)
View(tmp2)
tmp <- des_sir[[i]]
tmp2 <- tapply(tmp, X = tmp$dam, FUN = length)
View(tmp2)
tmp2 <- tapply(offspring, X = offspring$dam, FUN = length)
View(tmp2)
mating <- tapply(offspring, X = offspring$dam, FUN = length)
View(tmp2)
rm(list=ls())
setwd("~/")
source('exclusion_power_boissard.R')
source('exclusion_power.R')
source('marker_power.R')
source('offspring_simulation.R')
source('pedigree_exclusion.R')
source('pedigree_likelihood.R')
source('MAF.R')
source('true_mating.R')
#Simulation des génotypes
nbmrk <- 120
sir <- matrix(NA, 10, nbmrk)
sir[] <- sample(c(0,1), size = 10*nbmrk, replace = T)
rownames(sir) <- paste0('sir_',c(1:10))
dam <- matrix(NA, 5, nbmrk)
dam[] <- sample(c(0,1), size = 5*nbmrk, replace = T)
rownames(dam) <- paste0('dam_',c(1:5))
#Puissance du jeu de marqueur a priori
Pu <- exclusion_power_boissard(sir, dam)
Pu2 <- exclusion_power(sir, dam)
#Simulation de la descendance
offspring <- offspring_simulation(sir, dam, 1000)
#Pedigree
ped_exclusion <- pedigree_exclusion(offspring[[1]], sir, dam)
rownames(offspring[[1]]) <- paste0('off_', c(1:nrow(offspring[[1]])))
ped_likelihood <- pedigree_likelihood(offspring[[1]], sir, dam)
#Puissance d'assignation
assignation <- data.frame(sir = ped_exclusion[[1]][,1], dam = ped_exclusion[[2]][,1])
Pa_exclusion <- marker_power(assignation, offspring[[2]])
assignation_likelihood <- ped_likelihood[,2:3]
rownames(assignation_likelihood) <- ped_likelihood[,1]
Pa_likelihood <- marker_power(assignation_likelihood, offspring[[2]])
assignation <- data.frame(sir = ped_exclusion[[1]][,1], dam = ped_exclusion[[2]][,1])
mat_exclu <- mating(assignation)
Pa_exclusion <- marker_power(assignation, offspring[[2]])
assignation_likelihood <- ped_likelihood[,2:3]
rownames(assignation_likelihood) <- ped_likelihood[,1]
mat_like <- mating(assignation_likelihood)
Pa_likelihood <- marker_power(assignation_likelihood, offspring[[2]])
mat_exclu <- true_mating(assignation)
mat_like <- true_mating(assignation_likelihood)
View(dam)
View(mat_exclu)
assignation_likelihood
mat_like <- true_mating(as.data.frame(assignation_likelihood))
View(mat_like)
nbmrk <- 80
sir <- matrix(NA, 10, nbmrk)
sir[] <- sample(c(0,1), size = 10*nbmrk, replace = T)
rownames(sir) <- paste0('sir_',c(1:10))
dam <- matrix(NA, 5, nbmrk)
dam[] <- sample(c(0,1), size = 5*nbmrk, replace = T)
rownames(dam) <- paste0('dam_',c(1:5))
#Puissance du jeu de marqueur a priori
Pu <- exclusion_power_boissard(sir, dam)
Pu2 <- exclusion_power(sir, dam)
#Simulation de la descendance
offspring <- offspring_simulation(sir, dam, 1000)
#Pedigree
ped_exclusion <- pedigree_exclusion(offspring[[1]], sir, dam)
rownames(offspring[[1]]) <- paste0('off_', c(1:nrow(offspring[[1]])))
ped_likelihood <- pedigree_likelihood(offspring[[1]], sir, dam)
#Puissance d'assignation
assignation <- data.frame(sir = ped_exclusion[[1]][,1], dam = ped_exclusion[[2]][,1])
mat_exclu <- true_mating(assignation)
Pa_exclusion <- marker_power(assignation, offspring[[2]])
assignation_likelihood <- ped_likelihood[,2:3]
rownames(assignation_likelihood) <- ped_likelihood[,1]
mat_like <- true_mating(as.data.frame(assignation_likelihood))
Pa_likelihood <- marker_power(assignation_likelihood, offspring[[2]])
nbmrk <- 10
sir <- matrix(NA, 10, nbmrk)
sir[] <- sample(c(0,1), size = 10*nbmrk, replace = T)
rownames(sir) <- paste0('sir_',c(1:10))
dam <- matrix(NA, 5, nbmrk)
dam[] <- sample(c(0,1), size = 5*nbmrk, replace = T)
rownames(dam) <- paste0('dam_',c(1:5))
#Puissance du jeu de marqueur a priori
Pu <- exclusion_power_boissard(sir, dam)
Pu2 <- exclusion_power(sir, dam)
#Simulation de la descendance
offspring <- offspring_simulation(sir, dam, 1000)
#Pedigree
ped_exclusion <- pedigree_exclusion(offspring[[1]], sir, dam)
rownames(offspring[[1]]) <- paste0('off_', c(1:nrow(offspring[[1]])))
ped_likelihood <- pedigree_likelihood(offspring[[1]], sir, dam)
#Puissance d'assignation
assignation <- data.frame(sir = ped_exclusion[[1]][,1], dam = ped_exclusion[[2]][,1])
mat_exclu <- true_mating(assignation)
Pa_exclusion <- marker_power(assignation, offspring[[2]])
assignation_likelihood <- ped_likelihood[,2:3]
rownames(assignation_likelihood) <- ped_likelihood[,1]
mat_like <- true_mating(as.data.frame(assignation_likelihood))
Pa_likelihood <- marker_power(assignation_likelihood, offspring[[2]])
View(mat_exclu)
View(mat_like)
#Mismatch
missmatch <- length(ped_exclusion[[1]][,3])
ped_exclusion[[1]][,3]
#Mismatch
missmatch <- length(na.omit(ped_exclusion[[1]][,3]))
nbmrk <- 200
sir <- matrix(NA, 10, nbmrk)
sir[] <- sample(c(0,1), size = 10*nbmrk, replace = T)
rownames(sir) <- paste0('sir_',c(1:10))
dam <- matrix(NA, 5, nbmrk)
dam[] <- sample(c(0,1), size = 5*nbmrk, replace = T)
rownames(dam) <- paste0('dam_',c(1:5))
#Puissance du jeu de marqueur a priori
Pu <- exclusion_power_boissard(sir, dam)
Pu2 <- exclusion_power(sir, dam)
#Simulation de la descendance
offspring <- offspring_simulation(sir, dam, 1000)
#Pedigree
ped_exclusion <- pedigree_exclusion(offspring[[1]], sir, dam)
rownames(offspring[[1]]) <- paste0('off_', c(1:nrow(offspring[[1]])))
ped_likelihood <- pedigree_likelihood(offspring[[1]], sir, dam)
#Mismatch
missmatch <- length(na.omit(ped_exclusion[[1]][,3]))
#Mismatch
missmatch <- 100*length(na.omit(ped_exclusion[[1]][,3]))/length(ped_exclusion[[1]][,3])
assignation <- data.frame(sir = ped_exclusion[[1]][,1], dam = ped_exclusion[[2]][,1])
mat_exclu <- true_mating(assignation)
Pa_exclusion <- marker_power(assignation, offspring[[2]])
assignation_likelihood <- ped_likelihood[,2:3]
rownames(assignation_likelihood) <- ped_likelihood[,1]
mat_like <- true_mating(as.data.frame(assignation_likelihood))
Pa_likelihood <- marker_power(assignation_likelihood, offspring[[2]])
nbmrk <- 140
sir <- matrix(NA, 10, nbmrk)
sir[] <- sample(c(0,1), size = 10*nbmrk, replace = T)
rownames(sir) <- paste0('sir_',c(1:10))
dam <- matrix(NA, 5, nbmrk)
dam[] <- sample(c(0,1), size = 5*nbmrk, replace = T)
rownames(dam) <- paste0('dam_',c(1:5))
#Puissance du jeu de marqueur a priori
Pu <- exclusion_power_boissard(sir, dam)
Pu2 <- exclusion_power(sir, dam)
#Simulation de la descendance
offspring <- offspring_simulation(sir, dam, 1000)
#Pedigree
ped_exclusion <- pedigree_exclusion(offspring[[1]], sir, dam)
rownames(offspring[[1]]) <- paste0('off_', c(1:nrow(offspring[[1]])))
ped_likelihood <- pedigree_likelihood(offspring[[1]], sir, dam)
#Mismatch
missmatch <- 100*length(na.omit(ped_exclusion[[1]][,3]))/length(ped_exclusion[[1]][,3])
#Puissance d'assignation
assignation <- data.frame(sir = ped_exclusion[[1]][,1], dam = ped_exclusion[[2]][,1])
mat_exclu <- true_mating(assignation)
Pa_exclusion <- marker_power(assignation, offspring[[2]])
assignation_likelihood <- ped_likelihood[,2:3]
rownames(assignation_likelihood) <- ped_likelihood[,1]
mat_like <- true_mating(as.data.frame(assignation_likelihood))
Pa_likelihood <- marker_power(assignation_likelihood, offspring[[2]])
nbmrk <- 100
sir <- matrix(NA, 10, nbmrk)
sir[] <- sample(c(0,1), size = 10*nbmrk, replace = T)
rownames(sir) <- paste0('sir_',c(1:10))
dam <- matrix(NA, 5, nbmrk)
dam[] <- sample(c(0,1), size = 5*nbmrk, replace = T)
rownames(dam) <- paste0('dam_',c(1:5))
#Puissance du jeu de marqueur a priori
Pu <- exclusion_power_boissard(sir, dam)
Pu2 <- exclusion_power(sir, dam)
#Simulation de la descendance
offspring <- offspring_simulation(sir, dam, 1000)
#Pedigree
ped_exclusion <- pedigree_exclusion(offspring[[1]], sir, dam)
rownames(offspring[[1]]) <- paste0('off_', c(1:nrow(offspring[[1]])))
ped_likelihood <- pedigree_likelihood(offspring[[1]], sir, dam)
#Mismatch
missmatch <- 100*length(na.omit(ped_exclusion[[1]][,3]))/length(ped_exclusion[[1]][,3])
#Puissance d'assignation
assignation <- data.frame(sir = ped_exclusion[[1]][,1], dam = ped_exclusion[[2]][,1])
mat_exclu <- true_mating(assignation)
Pa_exclusion <- marker_power(assignation, offspring[[2]])
assignation_likelihood <- ped_likelihood[,2:3]
rownames(assignation_likelihood) <- ped_likelihood[,1]
mat_like <- true_mating(as.data.frame(assignation_likelihood))
Pa_likelihood <- marker_power(assignation_likelihood, offspring[[2]])
nbmrk <- 60
sir <- matrix(NA, 10, nbmrk)
sir[] <- sample(c(0,1), size = 10*nbmrk, replace = T)
rownames(sir) <- paste0('sir_',c(1:10))
dam <- matrix(NA, 5, nbmrk)
dam[] <- sample(c(0,1), size = 5*nbmrk, replace = T)
rownames(dam) <- paste0('dam_',c(1:5))
#Puissance du jeu de marqueur a priori
Pu <- exclusion_power_boissard(sir, dam)
Pu2 <- exclusion_power(sir, dam)
#Simulation de la descendance
offspring <- offspring_simulation(sir, dam, 1000)
#Pedigree
ped_exclusion <- pedigree_exclusion(offspring[[1]], sir, dam)
rownames(offspring[[1]]) <- paste0('off_', c(1:nrow(offspring[[1]])))
ped_likelihood <- pedigree_likelihood(offspring[[1]], sir, dam)
#Mismatch
missmatch <- 100*length(na.omit(ped_exclusion[[1]][,3]))/length(ped_exclusion[[1]][,3])
#Puissance d'assignation
assignation <- data.frame(sir = ped_exclusion[[1]][,1], dam = ped_exclusion[[2]][,1])
mat_exclu <- true_mating(assignation)
Pa_exclusion <- marker_power(assignation, offspring[[2]])
assignation_likelihood <- ped_likelihood[,2:3]
rownames(assignation_likelihood) <- ped_likelihood[,1]
mat_like <- true_mating(as.data.frame(assignation_likelihood))
Pa_likelihood <- marker_power(assignation_likelihood, offspring[[2]])
1-Pa_exclusion
1-Pa_likelihood
View(mat_exclu)
nbmrk <- 160
sir <- matrix(NA, 10, nbmrk)
sir[] <- sample(c(0,1), size = 10*nbmrk, replace = T)
rownames(sir) <- paste0('sir_',c(1:10))
dam <- matrix(NA, 5, nbmrk)
dam[] <- sample(c(0,1), size = 5*nbmrk, replace = T)
rownames(dam) <- paste0('dam_',c(1:5))
#Puissance du jeu de marqueur a priori
Pu <- exclusion_power_boissard(sir, dam)
Pu2 <- exclusion_power(sir, dam)
#Simulation de la descendance
offspring <- offspring_simulation(sir, dam, 1000)
#Pedigree
ped_exclusion <- pedigree_exclusion(offspring[[1]], sir, dam)
rownames(offspring[[1]]) <- paste0('off_', c(1:nrow(offspring[[1]])))
ped_likelihood <- pedigree_likelihood(offspring[[1]], sir, dam)
#Mismatch
missmatch <- 100*length(na.omit(ped_exclusion[[1]][,3]))/length(ped_exclusion[[1]][,3])
#Puissance d'assignation
assignation <- data.frame(sir = ped_exclusion[[1]][,1], dam = ped_exclusion[[2]][,1])
mat_exclu <- true_mating(assignation)
Pa_exclusion <- marker_power(assignation, offspring[[2]])
assignation_likelihood <- ped_likelihood[,2:3]
rownames(assignation_likelihood) <- ped_likelihood[,1]
mat_like <- true_mating(as.data.frame(assignation_likelihood))
Pa_likelihood <- marker_power(assignation_likelihood, offspring[[2]])
View(mat_exclu)
View(mat_like)
View(mat_exclu)
#Test ACP
library('FactoMineR')
install.packages("FactoMineR")
#Test ACP
library('FactoMineR')
PCA(sir)
PCA(as.data.frame(sir))
PCA(as.data.frame(t(sir)))
PCA(as.data.frame(t(dam)))
PCA(as.data.frame(t(sir)))
install.packages("proftools")
setwd("D:/Data_RG/package_APIS/APIS/data")
load("genotype_APIS.RData")
dam <- as.character(dam)
load("genotype_APIS.RData")
dam <- apply(dam, 2, as.character)
dam <- apply(dam, 2, as.character)
sire <- apply(sire, 2, as.character)
off <- apply(off, 2, as.character)
library("APIS", lib.loc="~/R/win-library/3.4")
result <- APIS(off.genotype = off,
result <- APIS(off.genotype = off,
sire.genotype = sire,
dam.genotype = dam,
error = 0.05)
View(off)
rownames(off)
rownames(off) <- paste0("off_", c(1:nrow(off)))
rownames(off)
rownames(sire) <- paste0("sire_", c(1:nrow(sire)))
rownames(dam) <- paste0("dam_", c(1:nrow(dam)))
result <- APIS(off.genotype = off,
sire.genotype = sire,
dam.genotype = dam,
error = 0.05)
rm(result)
save.image("genotype_APIS.RData")
devtools::install_github("rgriot/APIS")
library(APIS)
data("genotype_APIS")
result <- APIS(off.genotype = off,
sire.genotype = sire,
dam.genotype = dam,
error = 0.05)
