labs(x = "APIS limit", y = "SAR (%)", colour = "Assignment quality", fill = "Assignment quality")
setwd("C:/Users/rgriot/Desktop/Publication")
png(filename = paste0("reSampling_sire",l,".png"), height = 13, width = 17, units = "cm", res = 500)
print(plt)
dev.off()
}
for (l in c(1:2)) {
dataPlot <- dataSplit[[l]]
errorPlot <- dataPlot
errorPlot$CI <- errorPlot$Assignment_Rate - errorPlot$SD
errorPlot$CU <- errorPlot$Assignment_Rate + errorPlot$SD
errorPlot$CI <- ifelse(test = errorPlot$CI > 0, yes = errorPlot$CI, no = 0)
plt <- ggplot(data = dataPlot, aes(x = nb_mrk, y = Assignment_Rate, fill = Assignment_quality)) +
geom_bar(stat="identity", position = "dodge", width = 0.8) +
geom_errorbar(data = errorPlot, aes(ymin = CI, ymax = CU),
width = 0.2, position = position_dodge(0.8)) +
scale_fill_manual(values = c("gray60", "gray30")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.title.x = element_text(margin = margin(20, 0, 0, 0))) +
theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0))) +
ylim(0,120) +
facet_wrap(~ APIS, nrow = 1) +
labs(x = "Number of markers", y = "SAR (%)", colour = "Assignment quality", fill = "Assignment quality")
setwd("C:/Users/rgriot/Desktop/Publication")
png(filename = paste0("reSampling_sire",l,".png"), height = 13, width = 17, units = "cm", res = 500)
print(plt)
dev.off()
}
plt <- ggplot(data = dataPlot, aes(x = nb_mrk, y = Assignment_Rate, fill = Assignment_quality)) +
geom_bar(stat="identity", position = "dodge", width = 0.8) +
scale_fill_manual(values = c("gray60", "gray30")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.title.x = element_text(margin = margin(20, 0, 0, 0))) +
theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0))) +
ylim(0,120) +
facet_wrap(~ APIS, nrow = 1) +
labs(x = "Number of markers", y = "SAR (%)", colour = "Assignment quality", fill = "Assignment quality")
plt
plt <- ggplot(data = dataPlot, aes(x = nb_mrk, y = Assignment_Rate, fill = Assignment_quality)) +
geom_bar(stat="identity", position = "stacked", width = 0.8) +
scale_fill_manual(values = c("gray60", "gray30")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.title.x = element_text(margin = margin(20, 0, 0, 0))) +
theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0))) +
ylim(0,120) +
facet_wrap(~ APIS, nrow = 1) +
labs(x = "Number of markers", y = "SAR (%)", colour = "Assignment quality", fill = "Assignment quality")
plt <- ggplot(data = dataPlot, aes(x = nb_mrk, y = Assignment_Rate, fill = Assignment_quality)) +
geom_bar(stat="identity") +
scale_fill_manual(values = c("gray60", "gray30")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.title.x = element_text(margin = margin(20, 0, 0, 0))) +
theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0))) +
ylim(0,120) +
facet_wrap(~ APIS, nrow = 1) +
labs(x = "Number of markers", y = "SAR (%)", colour = "Assignment quality", fill = "Assignment quality")
plt
plt <- ggplot(data = dataPlot, aes(x = nb_mrk, y = Assignment_Rate,
fill = factor(Assignment_quality, levels = c("Wrong assignment", "True assignment")))) +
geom_bar(stat="identity") +
scale_fill_manual(values = c("gray60", "gray30")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.title.x = element_text(margin = margin(20, 0, 0, 0))) +
theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0))) +
ylim(0,120) +
facet_wrap(~ APIS, nrow = 1) +
labs(x = "Number of markers", y = "SAR (%)", colour = "Assignment quality", fill = "Assignment quality")
plt
plt <- ggplot(data = dataPlot, aes(x = nb_mrk, y = Assignment_Rate,
fill = factor(Assignment_quality, levels = c("Wrong assignment", "True assignment")))) +
geom_bar(stat="identity") +
scale_fill_manual(values = c("gray30", "gray60")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.title.x = element_text(margin = margin(20, 0, 0, 0))) +
theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0))) +
ylim(0,120) +
facet_wrap(~ APIS, nrow = 1) +
labs(x = "Number of markers", y = "SAR (%)", colour = "Assignment quality", fill = "Assignment quality")
plt
for (l in c(1:2)) {
dataPlot <- dataSplit[[l]]
errorPlot <- dataPlot
errorPlot$CI <- errorPlot$Assignment_Rate - errorPlot$SD
errorPlot$CU <- errorPlot$Assignment_Rate + errorPlot$SD
errorPlot$CI <- ifelse(test = errorPlot$CI > 0, yes = errorPlot$CI, no = 0)
plt <- ggplot(data = dataPlot, aes(x = nb_mrk, y = Assignment_Rate,
fill = factor(Assignment_quality, levels = c("Wrong assignment", "True assignment")))) +
geom_bar(stat="identity") +
scale_fill_manual(values = c("gray30", "gray60")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.title.x = element_text(margin = margin(20, 0, 0, 0))) +
theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0))) +
ylim(0,120) +
facet_wrap(~ APIS, nrow = 1) +
labs(x = "Number of markers", y = "SAR (%)", colour = "Assignment quality", fill = "Assignment quality")
setwd("C:/Users/rgriot/Desktop/Publication")
png(filename = paste0("reSampling_sire",l,".png"), height = 13, width = 17, units = "cm", res = 500)
print(plt)
dev.off()
}
rm(list = ls())
setwd("C:/Users/rgriot/Dropbox/phD/Assignation")
source('pedigree_parallel.R')
source('pedigree_fortran.R')
source('setup_threshV2.R')
source('exclusion_power_boichard.R')
setwd("D:/Data_RG/Package_Assignation_nouveau/Package_Assignation_nouveau/vignette")
geno <- read.table('genotype.txt')
geno <- read.table('genotype.txt', row.names =  1)
View(geno)
sire <- as.matrix(geno[which(rownames(geno) %in% c(11:20)),])
recode_to_APIS <- function(X) {
X[X==0] <- 'A/A'
X[X==1] <- 'A/B'
X[X==2] <- 'B/B'
X[X==-9] <- 'NA/NA'
}
sire <- apply(sire, 1, recode_to_APIS)
sire <- as.matrix(geno[which(rownames(geno) %in% c(11:20)),])
table(sire)
sire <- apply(sire, 1, recode_to_APIS)
sire <- as.matrix(geno[which(rownames(geno) %in% c(11:20)),])
sire <- apply(sire, 2, recode_to_APIS)
sire <- as.matrix(geno[which(rownames(geno) %in% c(11:20)),])
sire <- recode_to_APIS(sire)
sire <- as.matrix(geno[which(rownames(geno) %in% c(11:20)),])
sire <- recode_to_APIS(sire)
sire <- as.matrix(geno[which(rownames(geno) %in% c(11:20)),])
sire[sire==1]
sire[sire==1] <- "A/A"
sire <- as.matrix(geno[which(rownames(geno) %in% c(11:20)),])
sire <- recode_to_APIS(sire)
sire <- as.matrix(geno[which(rownames(geno) %in% c(11:20)),])
sire <- recode_to_APIS(as.data.frame(sire))
sire <- as.matrix(geno[which(rownames(geno) %in% c(11:20)),])
recode_to_APIS <- function(X) {
X[X==0] <- 'A/A'
X[X==1] <- 'A/B'
X[X==2] <- 'B/B'
X[X==-9] <- 'NA/NA'
return(X)
}
sire <- apply(sire, 1, recode_to_APIS)
sire <- as.matrix(geno[which(rownames(geno) %in% c(11:20)),])
sire <- recode_to_APIS(sire)
dam <- as.matrix(geno[which(rownames(geno) %in% c(1:10)),])
dam <- recode_to_APIS(dam)
off <- as.matrix(geno[which(rownames(geno) %in% c(21:1020)),])
off <- recode_to_APIS(off)
P <- exclusion_power_boichard(sire, dam)
ped <- pedigree_parallel(offspring = off, sir = sire, dam = dam, thresh = ncol(off))
res <- setup_thresh(ped.log = ped$log.like, ped.exclu = ped$log.exclu, nb.mrk = ped$nb.mrk, erreur = 0.05)
par(mfrow = c(1,1))
res <- setup_thresh(ped.log = ped$log.like, ped.exclu = ped$log.exclu, nb.mrk = ped$nb.mrk, erreur = 0.05)
ped <- pedigree_parallel(offspring = off, sir = sire[sample(c(1:nrow(sire)), 5)], dam = dam, thresh = ncol(off))
ped <- pedigree_parallel(offspring = off, sir = sire[sample(c(1:nrow(sire)), 5),], dam = dam, thresh = ncol(off))
res <- setup_thresh(ped.log = ped$log.like, ped.exclu = ped$log.exclu, nb.mrk = ped$nb.mrk, erreur = 0.05)
parent <- rbind(sire, dam)
ped <- pedigree_parallel(offspring = off, sir = parent, dam = parent, thresh = ncol(off))
res <- setup_thresh(ped.log = ped$log.like, ped.exclu = ped$log.exclu, nb.mrk = ped$nb.mrk, erreur = 0.05)
test <- res$pedigree
View(test)
test <- res$log
View(test)
rm(list = ls())
library(stringr)
setwd("C:/Users/rgriot/Desktop/Publication")
data <- read.csv2('test_dataset.csv')
bonneAssignation    <- data$bonne_assignation
mauvaiseAssignation <- data$mauvaise_assignation
assignmentQuality <- rep(c("bonne", "mauvaise"), times = length(bonneAssignation))
data$data_set <- as.character(data$data_set)
genoError <- substr(data$data_set, nchar(data$data_set) - 3, nchar(data$data_set) - 3)
newData <- data.frame(data_set = data$data_set,
genoError = genoError,
missParent = data$miss_P,
APIS = data$APIS)
newData <- newData[rep(c(1:nrow(newData)), each = 2),]
newData$assignmentQuality <- assignmentQuality
assignment <- rep(NA, times = nrow(newData))
assignment[seq(1, length(assignment), 2)] <- bonneAssignation
assignment[seq(2, length(assignment), 2)] <- mauvaiseAssignation
newData$assignment <- assignment
# -----------------------------------------------------------------------------------------------------------------
data_by_genoError <- split(newData, newData$genoError)
dataPlot <- as.data.frame(matrix(NA, nrow = 1, ncol = 6))
colnames(dataPlot) <- c("genoError", "missParent", "APIS", "assignmentQuality", "Mean", "SD")
for (byGeno in data_by_genoError) {
data_by_missParent <- split(byGeno, byGeno$missParent)
e <- unique(byGeno$genoError)
for (byParent in data_by_missParent) {
data_by_APIS <- split(byParent, byParent$APIS)
mP <- unique(byParent$missParent)
for (l in data_by_APIS) {
a <- unique(l$APIS)
l_mean <- tapply(l$assignment, l$assignmentQuality, mean)
l_sd <- tapply(l$assignment, l$assignmentQuality, sd)
gAssign <- c(e, mP, a, "bonne", l_mean['bonne'], l_sd['bonne'])
bAssign <- c(e, mP, a, "mauvaise", l_mean['mauvaise'], l_sd['mauvaise'])
tmp <- rbind(gAssign, bAssign)
tmp <- as.data.frame(tmp)
colnames(tmp) <- c("genoError", "missParent", "APIS", "assignmentQuality", "Mean", "SD")
dataPlot <- rbind(dataPlot, tmp)
}
}
}
dataPlot <- dataPlot[-1,]
#--------------------------------------------------------------------------------------------------------------------
# vec1 <- seq(1, nrow(dataPlot), 2)
# vec2 <- seq(2, nrow(dataPlot), 2)
#
# vec3 <- rep(NA, times = nrow(dataPlot))
# vec3[seq(1, nrow(dataPlot), 2)] <- vec2
# vec3[seq(2, nrow(dataPlot), 2)] <- vec1
# dataPlot <- dataPlot[vec3,]
dataPlot$genoError <- as.factor(dataPlot$genoError)
levels(dataPlot$genoError) <- c("1% of genotyping error", "3% of genotyping error")
dataPlot$missParent <- as.factor(dataPlot$missParent)
levels(dataPlot$missParent) <- c("0 missing sire", "10 missing sires", "50 missing sires")
dataPlot$APIS <- as.factor(dataPlot$APIS)
levels(dataPlot$APIS) <- c("APIS1", "APIS5")
dataPlot$assignmentQuality <- as.factor(dataPlot$assignmentQuality)
levels(dataPlot$assignmentQuality) <- c("True assignment", "Wrong assignment")
#dataPlot$assignmentQuality <- factor(dataPlot$assignmentQuality, levels = c("Wrong assignment", "True assignment"))
dataPlot$Mean <- as.numeric(dataPlot$Mean) * 100
colnames(dataPlot)[5] <- "SAR"
dataPlot$SD <- as.numeric(dataPlot$SD) * 100
colnames(dataPlot)[2] <- "number of missing sire"
library(ggplot2)
plot <- ggplot(data = dataPlot, aes(x = `number of missing sire`, y = SAR, fill = assignmentQuality)) +
geom_bar(stat="identity", position = "dodge", width = 0.8) +
geom_errorbar(data = dataPlot, aes(ymin = SAR - SD, ymax = SAR + SD),
width = 0.2, position = position_dodge(0.8)) +
facet_grid(APIS ~ genoError) +
guides(fill = guide_legend(title = "Assignment quality")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.title.x = element_text(margin = margin(20, 0, 0, 0))) +
theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0))) +
scale_fill_manual(values = c("gray60", "gray30")) +
labs(y = "SAR (%)")
plot
plot <- ggplot(data = dataPlot, aes(x = missParent, y = SAR, fill = assignmentQuality)) +
geom_bar(stat="identity") +
geom_errorbar(data = errorPlot, aes(ymin = SAR - SD, ymax = SAR + SD), width = 0.2) +
facet_grid(APIS ~ genoError) +
guides(fill = guide_legend(title = "Assignment")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_manual(values = c("gray60", "gray30"))
plot
plot <- ggplot(data = dataPlot, aes(x = `number of missing sire`, y = SAR, fill = assignmentQuality)) +
geom_bar(stat="identity") +
facet_grid(APIS ~ genoError) +
guides(fill = guide_legend(title = "Assignment quality")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.title.x = element_text(margin = margin(20, 0, 0, 0))) +
theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0))) +
scale_fill_manual(values = c("palegreen3", "red3")) +
labs(y = "SAR (%)")
plot
plot <- ggplot(data = dataPlot, aes(x = `number of missing sire`, y = SAR,
fill = factor(assignmentQuality, levels = c("Wrong assignment", "True assignment")))) +
geom_bar(stat="identity") +
facet_grid(APIS ~ genoError) +
guides(fill = guide_legend(title = "Assignment quality")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.title.x = element_text(margin = margin(20, 0, 0, 0))) +
theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0))) +
scale_fill_manual(values = c("palegreen3", "red3")) +
labs(y = "SAR (%)")
plot
plot <- ggplot(data = dataPlot, aes(x = `number of missing sire`, y = SAR,
fill = factor(assignmentQuality, levels = c("Wrong assignment", "True assignment")))) +
geom_bar(stat="identity") +
facet_grid(APIS ~ genoError) +
guides(fill = guide_legend(title = "Assignment quality")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.title.x = element_text(margin = margin(20, 0, 0, 0))) +
theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0))) +
scale_fill_manual(values = c("red3", "palegreen3")) +
labs(y = "SAR (%)")
plot
plot <- ggplot(data = dataPlot, aes(x = `number of missing sire`, y = SAR,
fill = factor(assignmentQuality, levels = c("Wrong assignment", "True assignment")))) +
geom_bar(stat="identity") +
facet_grid(APIS ~ genoError) +
guides(fill = guide_legend(title = "Assignment quality")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.title.x = element_text(margin = margin(20, 0, 0, 0))) +
theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0))) +
theme(panel.spacing = unit(2, "lines")) +
scale_fill_manual(values = c("red3", "palegreen3")) +
labs(y = "SAR (%)")
plot
plot <- ggplot(data = dataPlot, aes(x = `number of missing sire`, y = SAR,
fill = factor(assignmentQuality, levels = c("Wrong assignment", "True assignment")))) +
geom_bar(stat="identity") +
facet_grid(APIS ~ genoError) +
guides(fill = guide_legend(title = "Assignment quality")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.title.x = element_text(margin = margin(20, 0, 0, 0))) +
theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0))) +
theme(panel.spacing = unit(3, "lines")) +
scale_fill_manual(values = c("red3", "palegreen3")) +
labs(y = "SAR (%)")
plot
plot <- ggplot(data = dataPlot, aes(x = `number of missing sire`, y = SAR,
fill = factor(assignmentQuality, levels = c("Wrong assignment", "True assignment")))) +
geom_bar(stat="identity", width = 0.8) +
facet_grid(APIS ~ genoError) +
guides(fill = guide_legend(title = "Assignment quality")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.title.x = element_text(margin = margin(20, 0, 0, 0))) +
theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0))) +
theme(panel.spacing = unit(3, "lines")) +
scale_fill_manual(values = c("red3", "palegreen3")) +
labs(y = "SAR (%)")
plot
plot <- ggplot(data = dataPlot, aes(x = `number of missing sire`, y = SAR,
fill = factor(assignmentQuality, levels = c("Wrong assignment", "True assignment")))) +
geom_bar(stat="identity", width = 0.6) +
facet_grid(APIS ~ genoError) +
guides(fill = guide_legend(title = "Assignment quality")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.title.x = element_text(margin = margin(20, 0, 0, 0))) +
theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0))) +
theme(panel.spacing = unit(3, "lines")) +
scale_fill_manual(values = c("red3", "palegreen3")) +
labs(y = "SAR (%)")
plot
setwd("C:/Users/rgriot/Desktop/Publication")
png(filename = paste0("plot_norvegien.png"), height = 13, width = 17, units = "cm", res = 500)
plot
dev.off()
setwd("C:/Users/rgriot/Desktop/Publication")
png(filename = paste0("plot_norvegien.png"), height = 13, width = 17, units = "cm", res = 1000)
plot
dev.off()
rm(list = ls())
library(stringr)
setwd("C:/Users/rgriot/Desktop/Publication")
data <- read.csv2('test_dataset.csv')
bonneAssignation    <- data$bonne_assignation
mauvaiseAssignation <- data$mauvaise_assignation
assignmentQuality <- rep(c("bonne", "mauvaise"), times = length(bonneAssignation))
data$data_set <- as.character(data$data_set)
genoError <- substr(data$data_set, nchar(data$data_set) - 3, nchar(data$data_set) - 3)
newData <- data.frame(data_set = data$data_set,
genoError = genoError,
missParent = data$miss_P,
APIS = data$APIS)
newData <- newData[rep(c(1:nrow(newData)), each = 2),]
newData$assignmentQuality <- assignmentQuality
assignment <- rep(NA, times = nrow(newData))
assignment[seq(1, length(assignment), 2)] <- bonneAssignation
assignment[seq(2, length(assignment), 2)] <- mauvaiseAssignation
newData$assignment <- assignment
# -----------------------------------------------------------------------------------------------------------------
data_by_genoError <- split(newData, newData$genoError)
dataPlot <- as.data.frame(matrix(NA, nrow = 1, ncol = 6))
colnames(dataPlot) <- c("genoError", "missParent", "APIS", "assignmentQuality", "Mean", "SD")
for (byGeno in data_by_genoError) {
data_by_missParent <- split(byGeno, byGeno$missParent)
e <- unique(byGeno$genoError)
for (byParent in data_by_missParent) {
data_by_APIS <- split(byParent, byParent$APIS)
mP <- unique(byParent$missParent)
for (l in data_by_APIS) {
a <- unique(l$APIS)
l_mean <- tapply(l$assignment, l$assignmentQuality, mean)
l_sd <- tapply(l$assignment, l$assignmentQuality, sd)
gAssign <- c(e, mP, a, "bonne", l_mean['bonne'], l_sd['bonne'])
bAssign <- c(e, mP, a, "mauvaise", l_mean['mauvaise'], l_sd['mauvaise'])
tmp <- rbind(gAssign, bAssign)
tmp <- as.data.frame(tmp)
colnames(tmp) <- c("genoError", "missParent", "APIS", "assignmentQuality", "Mean", "SD")
dataPlot <- rbind(dataPlot, tmp)
}
}
}
dataPlot <- dataPlot[-1,]
#--------------------------------------------------------------------------------------------------------------------
# vec1 <- seq(1, nrow(dataPlot), 2)
# vec2 <- seq(2, nrow(dataPlot), 2)
#
# vec3 <- rep(NA, times = nrow(dataPlot))
# vec3[seq(1, nrow(dataPlot), 2)] <- vec2
# vec3[seq(2, nrow(dataPlot), 2)] <- vec1
# dataPlot <- dataPlot[vec3,]
dataPlot$genoError <- as.factor(dataPlot$genoError)
levels(dataPlot$genoError) <- c("1% of genotyping error", "3% of genotyping error")
dataPlot$missParent <- as.factor(dataPlot$missParent)
levels(dataPlot$missParent) <- c("0 missing sire", "10 missing sires", "50 missing sires")
dataPlot$APIS <- as.factor(dataPlot$APIS)
levels(dataPlot$APIS) <- c("APIS1", "APIS5")
dataPlot$assignmentQuality <- as.factor(dataPlot$assignmentQuality)
levels(dataPlot$assignmentQuality) <- c("True assignment", "Wrong assignment")
#dataPlot$assignmentQuality <- factor(dataPlot$assignmentQuality, levels = c("Wrong assignment", "True assignment"))
dataPlot$Mean <- as.numeric(dataPlot$Mean) * 100
colnames(dataPlot)[5] <- "SAR"
dataPlot$SD <- as.numeric(dataPlot$SD) * 100
colnames(dataPlot)[2] <- "number of missing sire"
errorPlot <- dataPlot
errorPlot$SAR[which(errorPlot$assignmentQuality == "True assignment")] <- errorPlot$SAR[which(errorPlot$assignmentQuality == "True assignment")] +
errorPlot$SAR[which(errorPlot$assignmentQuality == "Wrong assignment")]
View(dataPlot)
View(data)
View(newData)
newData$assignment[which(newData$assignmentQuality == 'mauvaise')]
# ---------------------------------------------------------------------------------------------------------------
assignment_ErrorRate <- newData$assignment[which(newData$assignmentQuality == 'mauvaise')] / (newData$assignment[which(newData$assignmentQuality == 'mauvaise')] + newData$assignment[which(newData$assignmentQuality == 'bonne')])
# ---------------------------------------------------------------------------------------------------------------
assignment_ErrorRate <- 100 * newData$assignment[which(newData$assignmentQuality == 'mauvaise')] / (newData$assignment[which(newData$assignmentQuality == 'mauvaise')] + newData$assignment[which(newData$assignmentQuality == 'bonne')])
hist(assignment_ErrorRate)
newData$genoError
seq(1,nrow(newData),2)
assignment_ErrorRate <- data.frame(genoError = newData$genoError[seq(1,nrow(newData),2)],
missParent = newData$missParent[seq(1,nrow(newData),2)],
APIS = newData$APIS[seq(1,nrow(newData),2)],
errorRate = assignment_ErrorRate)
View(assignment_ErrorRate)
assignment_ErrorRate$missParent <- as.factor(assignment_ErrorRate$missParent)
assignment_ErrorRate$APIS <- as.factor(assignment_ErrorRate$APIS)
ml <- lm(assignment_ErrorRate$errorRate ~ assignment_ErrorRate$genoError + assignment_ErrorRate$missParent + assignment_ErrorRate$APIS)
summary(ml)
library(car)
Anova(ml)
anova(ml)
summary(ml)
table(ml)
byAPIS <- split(assignment_ErrorRate, assignment_ErrorRate$APIS)
aggregate(errorRate ~ genoError + missParent + APIS, data = assignment_ErrorRate, FUN = mean)
aggregate(errorRate ~ genoError + missParent + APIS, data = assignment_ErrorRate, FUN = sd)
assignment <- 100 * (newData$assignment[which(newData$assignmentQuality == 'mauvaise')] + newData$assignment[which(newData$assignmentQuality == 'bonne')])
hist(assignment)
assignment <- data.frame(genoError = newData$genoError[seq(1,nrow(newData),2)],
missParent = newData$missParent[seq(1,nrow(newData),2)],
APIS = newData$APIS[seq(1,nrow(newData),2)],
assignment = assignment)
assignment$missParent <- as.factor(assignment$missParent)
assignment$APIS <- as.factor(assignment$APIS)
aggregate(assignment ~ genoError + missParent + APIS, data = assignment_ErrorRate, FUN = mean)
aggregate(assignment ~ genoError + missParent + APIS, data = assignment, FUN = mean)
aggregate(assignment ~ genoError + APIS, data = assignment, FUN = mean)
library(devtools)
devtools::install_github("rgriot/APIS")
devtools::install_github("rgriot/APIS")
devtools::install_github("rgriot/APIS")
citation()
rm(list = ls())
setwd("D:/Data_RG/package APIS/APIS/data")
data <- read.table('example_genotype_raw.txt')
View(data)
data <- read.table('example_genotype_raw.txt', row.names = 1)
sire <- data[which(rownames(data) %in% c(1:10)),]
sire <- data[which(rownames(data) %in% c(1:10)),]
dam <- data[which(rownames(data) %in% c(11:20)),]
off <- data[which(rownames(data) %in% c(21:1020)),]
data <- read.table('example_genotype_APIS.txt', row.names = 1)
rm(list = ls())
setwd("D:/Data_RG/package APIS/APIS/data")
data <- read.table('example_genotype_APIS.txt', row.names = 1)
View(data)
sire <- data[which(rownames(data) %in% c(1:10)),]
dam <- data[which(rownames(data) %in% c(11:20)),]
off <- data[which(rownames(data) %in% c(21:1020)),]
write.table(off, "offspring_genotype_APIS.txt", row.names = T, col.names = F, quote = F, sep = '\t')
write.table(off, "offspring_genotype_APIS.txt", row.names = T, col.names = F, quote = F, sep = '\t')
write.table(sire, "sire_genotype_APIS.txt", row.names = T, col.names = F, quote = F, sep = '\t')
write.table(dam, "dam_genotype_APIS.txt", row.names = T, col.names = F, quote = F, sep = '\t')
rm(data)
data("iris")
fleur <- data("iris")
view(fleur)
view(iris)
rm(list = ls())
setwd("D:/Data_RG/package APIS/APIS/data")
data <- read.table('example_genotype_APIS.txt', row.names = 1)
sire <- data[which(rownames(data) %in% c(1:10)),]
dam <- data[which(rownames(data) %in% c(11:20)),]
off <- data[which(rownames(data) %in% c(21:1020)),]
setwd("D:/Data_RG/package APIS/APIS/data")
data <- read.table('example_genotype_APIS.txt', row.names = 1)
sire <- data[which(rownames(data) %in% c(1:10)),]
dam <- data[which(rownames(data) %in% c(11:20)),]
off <- data[which(rownames(data) %in% c(21:1020)),]
off <- read.table(off, "offspring_genotype_APIS.txt")
off <- read.table("offspring_genotype_APIS.txt")
View(off)
rm(list = ls())
setwd("D:/Data_RG/package APIS/APIS/data")
off <- read.table("offspring_genotype_APIS.txt", row.names = 1)
sire <- read.table("sire_genotype_APIS.txt", row.names = 1)
dam <- read.table("dam_genotype_APIS.txt", row.names = 1)
save.image()
save.image("genotype_APIS")
save.image("genotype_APIS.RData")
rm(list = ls())
data("genotype_APIS")
data("genotype_APIS.RData")
setwd("D:/Data_RG/package APIS/APIS/data")
data("genotype_APIS")
load("genotype_APIS")
load("genotype_APIS.RData")
setwd("D:/Data_RG/package APIS/APIS/data")
off <- read.table("offspring_genotype_APIS.txt", row.names = 1)
sire <- read.table("sire_genotype_APIS.txt", row.names = 1)
dam <- read.table("dam_genotype_APIS.txt", row.names = 1)
nom_col <- paste0("M_",c(1:400))
colnames(off) <- nom_col
colnames(off) <- nom_col; colnames(sire) <- nom_col; colnames(dam) <- nom_col
data("iris")
View(iris)
